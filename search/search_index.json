{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Practicalli Software Development","text":"<p>Books and articles covering an extensive range of subjects related to software development practices and tools, with a specialisation on Clojure programming.</p> <p> </p> <p> </p>"},{"location":"#sponsor","title":"Sponsor","text":"<p>All sponsorship recieved is used to maintain and further develop the Practicalli series of books and videos, although most of the work is currently done with personal time and cost.</p> <p>Thank you to Cognitect, Nubank and a wide range of other sponsors from the Clojure community for your continued support</p>"},{"location":"#books","title":"Books","text":"<p>Practical guides across the full spectrum of software development.</p> <p>Practicalli Engineering Playbook</p> <p>Practical guides to Clojure programming and development workflows</p> <p>Practicalli Clojure Practicalli Clojure Web Services</p> <p>Development tools</p> <p>Practicalli Spacemacs Practicalli Neovim</p>"},{"location":"#projects","title":"Projects","text":"<p>Project Templates </p>"},{"location":"#practicall-user-configurations","title":"Practicall User Configurations","text":"<ul> <li>Clojure CLI Config</li> <li>Clojure LSP Config</li> <li>Spacemacs user config</li> <li>AstroNvim user config </li> <li>dotfiles - git, kitty, zsh (zprezto), regolith</li> </ul>"},{"location":"books/","title":"Practicalli Books","text":""},{"location":"books/#engineering-playbook","title":"Engineering Playbook","text":"<p>Practical guides for specific tools and practices to support software development. </p> <p></p>"},{"location":"books/#clojure","title":"Clojure","text":"<p>Clojure REPL workflow</p> <p>Learn the Clojure language through REPL driven development using Clojure CLI tools (deps.edn). Use a rich set of community tools, including Rebel readline Terminal UI, Portal and Reveal data browsers and tools to manage all aspects of Clojure projects.</p> <p>Practice Clojure by solving challenges with examples of different approaches. Encode the design and avoid regressions by writing unit tests and specifications for generative testing.</p> <p></p>"},{"location":"books/#clojure-web-services","title":"Clojure Web Services","text":"<p>Building services with APIs</p> <p>Build production level server-side web services, micro-services and API's in Clojure. </p> <p>Using Ring as an abstraction over HTTP with requests and responses as simple Clojure hash-maps. </p> <p>Routing of requests are managed by Compojure or Reitit, passing requests to handers which are Clojure functions. </p> <p>Data formats are managed by coercion and content negotiation. </p> <p>OpenAPI (swagger) is used for self-documenting APIs</p> <p> </p>"},{"location":"books/#spacemacs-emacs","title":"Spacemacs (Emacs)","text":"<p>powerful editing with Emacs and Vim multi-modal editing, with a mnemonic menu that simplifies the learning curve. Install a full Clojure development experience with two Git commands.</p> <p></p>"},{"location":"books/#neovim","title":"Neovim","text":"<p>Neovim for effective Clojure development with Conjure and Clojure LSP (nvim-treesitter). With a mnemonic menu to simplify the learning curve.</p> <ul> <li>Conjure </li> <li>AstroNvim &amp; AstroNvim Community</li> </ul> <p></p>"},{"location":"books/#under-development","title":"Under development","text":"<p>Practicalli books evolve from commercial experiences and from teaching in the community.  The following books are work in progress or need significant updates.</p>"},{"location":"books/#clojurescript","title":"ClojureScript","text":"<p>build single page apps (SPA's), dynamic UI's and mobile apps with responsive design</p> <p></p>"},{"location":"books/#clojure-data-science","title":"Clojure Data Science","text":"<p>Clojure tools and techniques when working with data science related projects. Ingest data</p> <p></p>"},{"location":"books/#amazon-web-services","title":"Amazon Web Services","text":"<p>Clojure development with Amazon Web Services</p>"},{"location":"books/#vspacecode","title":"VSpaceCode","text":"<p>VSpaceCode is a VS Code extension providing key driven commands for UI and editing features.</p> <p>Practicalli contributed Calva key bindings to the VSpaceCode project to support Clojure development.</p>"},{"location":"clojure-community/","title":"Community Support","text":""},{"location":"clojure-community/#community-support","title":"Community Support","text":"<p>There are several ways you can get help from the Clojure community.  The most active tools include:</p> <ul> <li>ask.clojure.org - official forum with the Clojure maintainers, help shape the development of Clojure</li> <li>Clojurian Slack community - very active community chat for immediate / shot term discussions</li> <li>Clojurians Zulip - active community chat with topic-based threading and full history, strong data science community and archive of most slack channels</li> <li>ClojureVerse - community forum for friendly short to long-term discussions</li> <li>New Clojurians: Ask Anything - simple web based threaded discussions</li> </ul> <p>General website such as redit/clojure are useful ways for the Clojure community to reach out to the more general development community.</p> <p>Hundreds of Clojure related videos are available on Clojure.tv, the London Clojurians community and Practicalli YouTube channels.</p>"},{"location":"clojure-community/#askclojureorg","title":"ask.clojure.org","text":"<p>An official place to ask questions about Clojure, ClojureScript, ClojureCLR, Clojure contrib libraries and any other Clojure topic.  This forum is used by the Clojure maintainer team and so discussions can shape the direction of Clojure.</p> <p></p> <p>Questions must have one or more of the fixed categories, enabling discussions to be simpler to find and engage with.  Questions can also have tags which are an extensible set of attributes, with several special tags</p> <ul> <li><code>problem</code> - problem in the language or library</li> <li><code>request</code> - request for enhancement in the language or library</li> <li><code>jira</code> - a jira ticket has been raised for development, Jira link included in an answer</li> </ul> <p>An account is required to ask questions, using GitHub authentication. Once logged in, click the user name in the upper right corner and add an email address if notifications are required.</p> <p>Account holders may vote on both questions and answers. Votes are used to inform decisions about future releases of Clojure, ClojureScript, libraries, etc.</p> <p>The @AskClojure twitter account tweets new questions posted to the ask.clojure.org forum on its feed, providing another channel to keep track of discussions.</p>"},{"location":"clojure-community/#clojurians-slack-channels","title":"Clojurians Slack channels","text":"<p>clojurians.net provides a self-service way to sign up to the Clojurians slack community, which contains many channels where you can get help.  The community is very active with a relatively quick response time in the most popular channels, especially #beginners.</p> <p>Discussions are only visible for a few days as the community uses the free Slack plan, there is no way to scroll back through history in Slack once its archived.  A community log of the discussions is provided by the ClojureVerse team and many channels are mirrored by the Clojurians Zulip community.</p> <p>Channels of note include:</p> <ul> <li><code>#beginners</code> - channel for help on most topics to do with Clojure, occasionally re-directed to focused channels</li> <li><code>#announcements</code> - occasional project / library announcements only. Use a threaded reply or jump to specific topic channel for follow-on discussions.</li> <li><code>#news-and-articles</code> - published content related to Clojure development, basically everything that is not a project/library announcement</li> <li><code>#events</code> taking place around the world, from meetups to conferences and anything in-between</li> <li><code>#jobs</code> <code>#remote-jobs</code> for posting legitimate job vacancies (and their location), with <code>#jobs-discuss</code> for experiences and advice on finding, getting and doing a job with Clojure</li> <li><code>#spacemacs</code> <code>#calva</code> <code>#chlorine</code> - editor specific channel with questions about using those tools, customising and developing features</li> <li><code>#cider</code> <code>#clj-kondo</code> <code>#figwheel-main</code> <code>#kaocha</code> - Clojure tooling discussions (there are many more)</li> <li><code>#clojuredesign-podcast</code> <code>#defnpodcast</code> <code>#practicalli</code> - supporting live and recorded broadcasts</li> <li><code>#admin-announcements</code> - messages from the administrators of the Clojurians Slack channel</li> <li><code>#community-development</code> community growth &amp; support, reporting code of conduct breaches to the administrators</li> </ul> <p>All discussions in Slack are bound by the Clojurians community code of conduct</p> <p>Post only in one specific channel rather than potentially spamming other channels.  If there are valid exceptions, then use a short summary or link to the original post or delete the original post and add it to another channel.</p>"},{"location":"clojure-community/#clojurians-zulip","title":"Clojurians Zulip","text":"<p>Discussions history is easier to follow in the Clojurians Zulip than in Slack, especially where discussions take place over time, thanks to the Zulip topic-based threading.  Slack does have discussion threading, but this is often not used as conversation don't last in Slack.</p> <p></p> <p>The Clojurians Zulip is very actively used, although not yet quite as busy as Slack.  There is a strong data science community on Zulip and is also used for SciCoj hackathons and other (virtual) events.  It would be great to see more Clojurians using Zulip either via the website or the excellent Zulip app.</p> <p>Discussions in Clojurians Zulip are also available indefinitely, whereas Slack conversations are only visible for a few days.   If a zulipchat bot has been added to a channel in the Clojurians Slack, that channel discussion history is available as a full-text-searchable archive.  To search the history of the #beginners channel, use <code>/</code> to start a search and use the query:</p> <pre><code>stream:slack-archive topic:beginners\n</code></pre> <p>An account is required and authentication is via GitHub, GitLab, Google or username/password.</p>"},{"location":"clojure-community/#clojureverse","title":"ClojureVerse","text":"<p>A Clojure community forum that is enjoyable to use with a rich user interface (topics, participant icons, etc.).  Responses may not be as immediate as Slack, however, it is far easier to track discussions as they evolve and review past discussions.</p> <p>All the usual forum features are available and direct and private messages can be sent between user accounts.</p> <p></p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>"},{"location":"commercial-projects/","title":"Commercial Projects","text":"<p>Experiences from Clojure related commercial projects.</p>"},{"location":"commercial-projects/#data-ingestion-and-distribution","title":"Data ingestion and distribution","text":"<p>Leading a globally distributed set of developments, team building the next generation in data services to support the Equities business at Citi.</p> <p>Responsible for services consumed by dozens of other technical stakeholders, liaising with many other development teams to understand their requirements and challenges. Working closely with those teams to enhance solutions provided by the teams I was responsible for. </p> <p>Involved in software development, testing, DevOps and even operations resouce management (acquiring physical servers &amp; hard drives for Oracle database servers)</p> <p>I defined standards and practices for the team within Citi tooling and regulation constraints, shaping the use of development tools and services and driving architecture discussions that shaped technical decisions within the team. </p> <p>The main technology stack is based on Clojure along with a myriad of enterprise technology services and products to create a global system processing millions of transactions per day. I also advocate functional programming and the Clojure programming language throughout the organisation.</p> <p>Leading the move to Cloud Infrastructure for our systems and start to evolve the core product architecture into an immutable event stream with Kafka.</p> <p>Citi is a leading financial services company with a truly global reach \u2013 200 million customer accounts in more than 160 countries.</p>"},{"location":"commercial-projects/#natural-language-processing","title":"Natural Language Processing","text":""},{"location":"commercial-projects/#sports-data","title":"Sports Data","text":"<p>Working with various stakeholders to create Clojure microservices and Kafka based data processing pipeline that generates a GraphQL API of sports statistics from live match events.</p> <p>Working closely with StatsBomb customer success and founders to meet the needs of our customers and provide technical assistance using the data API.</p> <p>Designed and constructed an Authorization and entitlement management system for the GraphQL API to secure our comprehensive sports statistics for customers and 3rd party applications. Wrote detailed user guides for customers to use the GraphQL API, configure 3rd party applications and generate tokens to access the service.</p>"},{"location":"commercial-projects/#data-enrichment-pipeline","title":"Data enrichment pipeline","text":"<p>Events in a sports match are scraped manually from video to create a baseline of play.</p> <p>Events data is enriched based on the surrounding events.</p> <p>A complete picture of all the actions in the game are generated for analytics.</p> <p>Individual match data is aggregated to provide player and team statistics throughout the sports year.</p> <p>All data is stored in a Postgresql database and Hasura used to generate a GraphQL API.</p> <p></p>"},{"location":"commercial-projects/#graphql-authentication","title":"GraphQL Authentication","text":"<p>Hasura has access rules to define which data can be accessed, however, there was no direct support for OAuth token validation.</p> <p>Hasura did provide a webhook so that each request could query an API to validate every request.</p> <p>A Clojure API was created using reitit and JWT middleware, checking customer tokens via OAuth.</p> <p>Hasura was used to generate rules to control access</p> <p>The Clojure API returned an x-hasura header if the access token was valid.  The hasura token contained data to be used by the hasura rules to control access to the graphql result.</p> <p>The Clojure API checked the token from every request made to the GraphQL API.</p> <p>Integrant was used to manage the software components in the Clojure web service.</p> <p></p>"},{"location":"commercial-projects/#fraud-detection","title":"Fraud Detection","text":"<p>Clojure Engineering in financial services, working with amazing people to deliver Fraud Detection using Machine Learning models</p> <p>Building a data pipeline with a range of service orchestration (internal and external) to supply comprehensive, accurate and timely data for processing via scientific models. Enabling the data science models to be effectively trained and instantly detect fraudulent activity within Fintech transactions</p> <p>Supported improvements in DevOps and Engineering workflows and practices, defining a range of common practices across the organisation.</p> <p>Unfortunately the role ended abruptly due to sudden economic shock.</p> <p>TODO: Structurizr diagrams</p>"},{"location":"contributing/","title":"Contributing to Practicalli","text":"<p>By submitting content ideas and corrections you are agreeing they can be used in any work by Practicalli under the Creative Commons Attribution ShareAlike 4.0 International license.  Attribution will be detailed via GitHub contributors.</p> <p>Please raise an issue before creating a pull request</p> <p>Raising an issue or post on the #practicalli channel of Clojurians Slack community avoids disappointment if the contribution would not be accepted and saves time for all.</p> <p>Practicalli books are written in markdown and use MkDocs to generate the published website via a GitHub workflow.  MkDocs can also run a local server using the <code>make docs</code> target from the <code>Makefile</code></p> <p>All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.</p>"},{"location":"contributing/#book-status","title":"Book status","text":""},{"location":"contributing/#submit-and-issue-or-idea","title":"Submit and issue or idea","text":"<p>If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can.</p> <p>Raising an issue before creating a pull request will save you and the maintainer time.</p> <p>Alternatively, reach out to Practicalli via the <code>#practicalli</code> channel of the Clojurians Slack community.</p> <p>Clojurians Slack community</p>"},{"location":"contributing/#considering-a-pull-request","title":"Considering a Pull request?","text":"<p>Pull Request Commits must be cryptographically signed</p> <p>All commits contributed to Practicalli must be signed via a legitimate SSH or GPG key to avoid the risk of commit spoofing.</p> <p>Configure commit signing with SSH key - Practicalli Engineering</p> <p>All pull requests must include an entry in CHANGELOG.md or will not be merged.  A changelog entry allows the community to follow the changes to the book.</p> <p>Each pull request will have a number of CI workflows run against the contribution, checking the format of the content and if a changelog entry has been provided.</p> <p>Please keep pull requests small and focused, as they are much quicker to review and easier to accept.  Ideally PR's should be for a specific page or at most a section.</p> <p>A PR with a list of changes across different sections will be closed without merging as these take considerable time to review.</p> <p>Issues such as grammar improvements are typically a sign of a rushed section that requires a rewrite, so a pull request to fix a typeographic error will probably not be merged.  Raise an issue, or post a thread in the  Clojurians Slack #practicall channel</p>"},{"location":"contributing/#thank-you-to-everyone-that-has-contributed","title":"Thank you to everyone that has contributed","text":"<p>A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language.  </p> <p>The Clojure community has been highly supportive of everyone using Clojure and I'd like to thank everyone for the feedback and contributions.  I would also like to thank everyone that has joined in with the London Clojurins community, ClojureBridgeLondon, Clojurians Slack community, Clojurians Zulip community and Clojureverse community.</p> <p>Thank you to everyone who sponsors the Practicalli websites and videos and for the Clojurists Together sponsorship, it helps me continue the work at a much faster pace.</p> <p>Special thanks to Bruce Durling for getting me into Cloure in the first place.</p> <p></p>"},{"location":"practicalli-team/","title":"Practicall Team","text":"<p>Learnging by teaching  Learning by doing </p> <p>practicalli content is to understand </p>"},{"location":"practicalli-team/#who-is-practicalli","title":"Who Is Practicalli","text":"<p>Practicalli is the result of many years \"learning by teaching\" in the community.</p> <p>The majority of learning was around Clojure and development tooling.</p>"},{"location":"practicalli-team/#community-developer","title":"Community Developer","text":"<p>Sharing code from dojo events</p> <p>Assembla GitHub</p> <p>Teaching engineers how to deploy from source on Heroku PaaS platform, </p>"},{"location":"practicalli-team/#journey-into-clojure","title":"Journey Into Clojure","text":"<p>Started looking at Haskell and Scala.  </p> <p>Both languages seemed more focused on defining types than solving problems.  Many conepts felt quite academic and I was looking for something more pragmatic and generally simpler.</p>"},{"location":"practicalli-team/#london-clojurians-dojo","title":"London Clojurians dojo","text":""},{"location":"practicalli-team/#clojurebridge-london","title":"ClojureBridge London","text":""},{"location":"practicalli-team/#hack-the-tower","title":"Hack the Tower","text":""},{"location":"practicalli-team/#commercial-experience","title":"Commercial Experience","text":""},{"location":"practicalli-team/#practicalli","title":"Practicalli","text":"<p>Live broadcasts as part of 100 days of code</p> <p>Studying clojure every day, writing projects, solving challenges, helping others learn 1-2-1 and in community events.</p> <p>Created Practicalli YouTube channel and branded books as Pracitalli</p> <ul> <li>Practicalli Spacemacs</li> <li>Practicalli Clojure</li> <li>Practicalli Clojure Web Services</li> <li>Practicalli ClojureScript</li> </ul> <p>Contiued to develop books as commercial and community experiences continued.</p> <p>Conjure plugin and Neovim Treemacs and LSP support finally enticed me to try Clojure development.</p> <p>Practicalli Neovim Config was created using Fennel language, an interesting challenge but within 6 weeks I had learned a lot about Neovim, available package managers, teleport and how to write some fennel code.  There were some really nice parts to the config, but it did have challenges that I wasnt going to have time to solve.</p> <p>AstroNvim provided an opportunity to make Neovim as easy to use as Spacemacs, which worked our exceedingly well.  Adding Clojure support was relavitely easy, copying some of the work I had done previously but for Lua rather than fennel this time.</p> <p>A Clojure Pack was designed and contributed to AstroNvim Community.</p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>"},{"location":"video-guides/","title":"Practicalli Video Guides","text":"<p>Screencasts &amp; Live Broadcasts</p> <p></p> <ul> <li>All Live broadcasts</li> <li>Challenges</li> <li>4Ever Clojure </li> <li>Exercisim</li> <li>Clojure CLI</li> <li>Neovim -Spacemacs</li> </ul>"},{"location":"assets/images/social/","title":"Social Cards","text":"<p>Social Cards are visual previews of the website that are included when sending links via social media platforms.</p> <p>Material for MkDocs is configured to generate beautiful social cards automatically, using the colors, fonts and logos defined in <code>mkdocs.yml</code></p> <p>Generated images are stored in this directory.</p>"},{"location":"blog/","title":"Practicalli Articles","text":""},{"location":"blog/accessing-aws-with-clojure-from-scratch---simple-approach/","title":"Accessing AWS with Clojure from scratch - simple approach","text":"<p> Cognitect Labs AWS API is an excellent data driven Clojure library for interacting with AWS from code.  The project includes working code examples.</p> <p>The biggest challenge for those new to AWS is to configuring suitable AWS accounts, programmatic access and service permissions.</p> <p>This article starts with nothing and steps through the simplest and quickest AWS account and permission setup, using the  AWS Free Tier.  </p> <p>Service quota limits</p> <p>Each service has itos own quota limits and some services are only free for a period of time (free trials &amp; 12 months free).</p> <p>The approach outlined is not intended for commercial work, only the bare essentials to start exploring what is possible with the Cognitect Labs library.  (Or you could try out  LocalStack if you have docker installed locally).</p> Avoid this approach for sensitive accounts <p>Avoid approach for personal or company projects containing sensitive information</p> Credit card required <p>A working credit card is required to setup a root account and AWS will charge the card $1 to verify identity and that the card is legitimate.  This amount will be returned within 3-5 days.</p> <p>Apart from the temporary charge, this approach should not incur any charges so long as the account stays within the free plan limits.  Recommend using a digital card that can be set to frozen when not explicitly used as a safety precaution.</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"blog/accessing-aws-with-clojure-from-scratch---simple-approach/#create-root-account","title":"Create Root account","text":"<p>A root account is used for administration of an Amazon Web Service (AWS) account. This includes management of IAM accounts which are used for day to day work and programmatic (code) access.</p> <p>Create a root account by  signing up for an AWS account</p> <p>Enter an email for the root account and a name for the AWS account</p> <p></p> <p>An email is sent to the address entered with a verification code.  Enter the code and select Verify</p> <p></p> <p>Generate a secure password for the root account, e.g. using a Password Manager such as NordPass or 1Password</p> <p></p> <p>Save the account password with your favourite password manager</p> <p>Select Personal plan as this account is only used for personal projects &amp; hacking (not cracking).</p> <p>Complete contact information with your actual details (used when AWS confirms the credit card is legitimate) and confirm the  AWS Customer Agreement.</p> <p></p> <p>Enter details of a valid credit/debit card.  AWS will charge $1 to the card, which will be returned in 3-5 days.</p> <p></p> <p>Confirm identity</p> <p>NOTE: do not include spaces in the security code even if they are in the image</p> <p>Select Send SMS</p> <p></p> <p>Confirm identity pin number</p> <p>4 digit code (dont use the 5 digit phone number by mistake)</p> <p></p> <p>Select support plan - Basic support - Free</p> <p>Select Complete Sign up</p> <p></p> <p>Congratulations</p> <p>An email will be sent to the root account address once the account is ready, which make take a few minutes.</p> <p>Take a break from the form filling by stretching and taking some deep breaths.</p> <p></p> <p>IAM Multi-Factor Authentication (MFA)</p> <p>Visit the IAM dashboard and add Multi-Factor authentication (MFA) to the root user account for additional security.  Practicalli uses the Authy app for Multi-Factor authentication</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"blog/accessing-aws-with-clojure-from-scratch---simple-approach/#iam-user-for-code-cli","title":"IAM User for Code &amp; CLI","text":"<p>Login to AWS Management Console with root account</p> <p>Search for and select IAM and create a new IAM user</p> <p></p> <p>Select Add user to group</p> <p>Create new group and assing it to the user</p> <p></p> <p>The group should be assigned Permission policies to access the relevant AWS services, e.g. AwsS3FullAccess</p> <p></p> <p>Ensure the new user is added to the group (I missed this step out initially and access was not allowed)</p> <p></p> <p>Once the IAM user has been created, create an Access Key (key and secret)</p> <p>Select the Security credentials tab in the user summary</p> <p>Select Command Line Interface (CLI) and tick the check box to understand this isnt the recommended approach.</p> <p></p> <p>Retrieve the access key details so they can be used when configuring the AWS CLI tool.</p> <p></p> <p>In a commercial environment, the operations team should create an IAM account for you, so this step is only relevant for your own education.</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"blog/accessing-aws-with-clojure-from-scratch---simple-approach/#install-aws-cli-2","title":"Install AWS CLI 2","text":"<p> AWS Command Line Interface (AWS CLI) is a unified tool to control multiple AWS services from the command line and automate them through scripts.</p> <p>The AWS CLI configuration can also be used by Clojure code using the Cognitect Labs AWS API library.</p> <p>Download the install script archive file</p> <pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n</code></pre> <p>Extract the install script which extract to a directory called <code>aws</code></p> <pre><code>unzip awscliv2.zip\n</code></pre> <p>Run the install script, providing the user password when prompted</p> <pre><code>sudo ~/aws/install\n</code></pre> <p>The install script can also be used to update an existing version of the AWS CLI version 2 (but not AWS CLI version 1)</p> <pre><code>sudo ~/aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update\n</code></pre>","tags":["aws","clojure","cognitect-labs"]},{"location":"blog/accessing-aws-with-clojure-from-scratch---simple-approach/#configure-aws-cli","title":"Configure AWS CLI","text":"<p>Use AWS CLI to create a configuration, using its wizard</p> <pre><code>aws configure\n</code></pre> <p>Enter the access key and access key secret from the IAM account when prompted</p> <p>Enter the default region, e.g. eu-west-1 for Ireland</p> <p>The wizard creates two files</p> <ul> <li><code>~/.aws/config</code> containing the <code>default</code> profile</li> <li><code>~/.aws/credentials</code> containing the AWS access key and secret (this is a plain text file, so not secure if someone hacks into your computer)</li> </ul> <p>An aws_session_token is not required, even though the AWS documentation mentions it repeatedly (but neglects to tell you how to create it)</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"blog/accessing-aws-with-clojure-from-scratch---simple-approach/#install-clojure","title":"Install Clojure","text":"<p> Practicalli guide to install Clojure CLI, Java and Practicalli Clojure CLI Config for a wide range of community tools.</p> <p>Leiningen should also work, although this tool was not tested</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"blog/accessing-aws-with-clojure-from-scratch---simple-approach/#cognitect-labs-aws-apis","title":"Cognitect Labs AWS API's","text":"<p>Now for the simpler part :)</p> <p>Create a new Clojure project, e.g. using the <code>:project/create</code> alias from Practicalli Clojure CLI Config.</p> <p>Create minimal Clojure CLI project</p> <pre><code>clojure -T:project/create :template :practicalli/minimal :name practicalli/bucket-of-data\n</code></pre> <p>Edit the <code>deps.edn</code> file and add the Cognitect Labs AWS API, Endpoints and S3 libraries</p> <p>Add Congnitect Labs AWS API libraries as project dependencies</p> Project deps.edn<pre><code>  com.cognitect.aws/api {:mvn/version \"0.8.692\"}\n  com.cognitect.aws/endpoints {:mvn/version \"1.1.12.504\"}\n  com.cognitect.aws/s3 {:mvn/version \"848.2.1413.0\"}\n</code></pre> <p> latest-release.edn listed all the libraries and their current version</p> <p>Start repl the repl, e.g. using the  Practicalli REPL Reloaded workflow or from an editor</p> <pre><code>clojure -M:repl/reloaded\n</code></pre> <p>Open <code>src/practicalli/bucket_of_data.clj</code> file in a Clojure aware editor &amp; connect to the REPL process (if the editor was not used to start the REPL process)</p> <p>Create a rich comment and start to experiment with the Cognitect Labs AWS API library.</p> <p>Example creating an S3 bucket, adding a file and reading the contents of a file.</p> <p>Require Cognitect Labs AWS API</p> <pre><code>(require '[cognitect.aws.client.api :as aws])\n</code></pre> <p>Define a client for the AWS S3 service</p> <pre><code>(def data-bucket (aws/client {:api :s3}))\n</code></pre> <p>Validate requests to the S3 service to report incorrect arguments (especially useful when starting out with the library).  Underlying this is a Clojure specification derived from the AWS specifications.</p> <p>Valicate S3 bucket requests</p> <pre><code>(aws/validate-requests data-bucket true)\n</code></pre> <p>Credentials are required for this request, so its a useful test to ensure the AWS CLI is configured correctly.</p> <p>List S3 buckets to check credentials are working</p> <pre><code>(aws/invoke data-bucket {:op :ListBuckets})\n</code></pre> <p>A REPL restart (stop/start) is required if the AWS environment variables are changed, otherwise the updated values in those environment variables will not be used.</p> <p>As Cognitect Labs AWS API has a complete specification for each service, all the available operations for a specific service can be listed (even if the credentials are not working)</p> <p>List the S3 Service operations.  Note, this returns a big data structure, so I find it useful to look at it in a data inspector, e.g. Portal, Cider Inspector or Morse</p> <p>List S3 service operations</p> <pre><code>(aws/ops data-bucket)\n</code></pre> <p>Once the name of the operation is know, view the documentation to see how it is used.</p> <p>Create S3 bucket</p> <pre><code>(aws/doc data-bucket :CreateBucket)\n</code></pre> <p>Portal provides an effective way to navigate </p> <p></p> <p>The Practicalli REPL Reloaded workflow launches Portal at startup and all evaluations are sent to the Portal UI, so its easy to navigate the large list of operations for an AWS service.</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"blog/accessing-aws-with-clojure-from-scratch---simple-approach/#sso-account-approach","title":"SSO Account approach","text":"<p>Single sign-on access can be used for engineers and command line access.</p> <p>The recommended approach is to use the AWS IAM Identity Center as a Single Sign-On (SSO) service.  The IAM Identity Center can manage users and accounts in its own directory, useful for personal AWS accounts (and probably brand new startups too). The IAM Identity Center can use qn external identity provider instead, e.g. Okta, Google Workspace, Active Directory, etc.</p> <p>An AWS Organisation is required to enable IAM Identity Center. It can take up to 24 hours for AWS to create an organisation if one does not already exist for the AWS account.</p> <p>The IAM Identity Center approach will be covered in a future article.</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"blog/accessing-aws-with-clojure-from-scratch---simple-approach/#summary","title":"Summary","text":"<p>This is only the start of using AWS from Clojure and almost all the work was to simply configuring AWS itself.</p> <p>There are lots of services to explore on AWS and with a working account and credentials and the excellent Cognitect Labs AWS API library it should be relatively straight forward (fingers crossed).</p> <p>Regularly review AWS usage</p> <p>Keep a considered eye on how much of AWS you are using.  </p> <p>Even when using a \"free plan\", it is possible to incur costs, e.g. forgetting to switch services off and exceeding quotas.  </p> <p>Its not clear as yet if AWS will stop the service or simply send a bill.  </p> <p>Being aware of the AWS quotas allowed for a service is a valuable step to ensure you can remain within the free plan.</p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/","title":"FreeDesktop.org XDG standard for Clojure development tools","text":"<p>The  FreeDesktop.org XDG basedir standard defines specific locations to store all user configuration, data files and caches.</p> <p>Without the XDG standard, these files and directories are often mixed together and stored in the <code>$HOME</code>  of the users account, making it more challenging to backup or version control.</p> <p>Development tools such as NeoVim, Emacs, Clojure CLI  and Clojure LSP support the XDG specification, although some tools like Leiningen required a little help.  There are simple approaches to work-around the limitations of tools that don't conform.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#freedesktop-xdg-standards","title":"FreeDesktop XDG Standards","text":"<p>FreeDesktop.org produces standards under the Cross-Desktop Group, referred to as XDG.</p> <p>Two of the most relevant specifications for users are:</p> <ul> <li>Desktop base directories (basedir): defining the location of application configuration and data files</li> <li>Desktop entries (.desktop): to define executable, application name, icon and description, used by application launchers and desktop menus</li> </ul> <p>This article will focus on the basedir configuration and document the XDG locations for a range of common developer tools</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#xdg-environment-variables","title":"XDG Environment variables","text":"<p>The XDG Base Directory Specification defines specific environment variables to define each locations, usually set in the configuration file of the operating system shell, e.g. zsh, bash, fish.</p> <p>Each location contains application specific files within a directory of the same name as that application, e.g. <code>XDG_CONFIG_HOME/git</code> for Git version control client.</p> <ul> <li><code>XDG_CONFIG_HOME</code> user-specific configuration files, default <code>$HOME/.config</code></li> <li><code>XDG_DATA_HOME</code> user-specific data files. default <code>$HOME/.local/share</code></li> <li><code>XDG_STATE_HOME</code> user-specific state data <code>$HOME/.local/state</code></li> <li><code>XDG_CACHE_HOME</code> user-specific non-essential (cached) data, default <code>$HOME/.cache</code></li> <li><code>XDG_RUNTIME_DIR</code> runtime files bound to the login status of the user</li> </ul> <p><code>XDG_CONFIG_DIRS</code> and <code>XDG_DATA_DIRS</code> can be used to define an ordered set of directories to search for their respective files, rather than just a single directory.</p> <p>Environment variables must be set to an absolute path to be consider valid.  Values can include other environment variables, e.g. HOME, as long as the path resolves as absolute.</p> <p>A detailed description is covered in the freedesktop.org basedir specification.</p> MacOSX FreeDesktop.org XDG Standard Paths <p>According to Apple documentation, the XDG Base directory specifications should use these locations</p> <ul> <li><code>XDG_CONFIG_HOME</code> -\ufe0e <code>~/Library/Preferences/</code> using reverse domain name notation: <code>com.apple.AppStore.appname</code></li> <li><code>XDG_DATA_HOME</code> -\ufe0e <code>~/Library/</code></li> <li><code>XDG_CACHE_HOME</code> -\ufe0e <code>~/Library/Caches/</code></li> </ul> <p>See the Mac OS X Reference Library: Where to Put Application Files and Mac OS X Reference Library: Important Java Directories on Mac OS X</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#configuring-linux-unix-operating-system","title":"Configuring Linux / Unix operating system","text":"<p>The XDG basedir specification is used by many Unix distributions, although the <code>XDG_CONFIG_HOME</code> is rarely set as it may break older applications.  Instead the OS uses the default locations in the specifications and expects applications to do the same.</p> <p>Some tools already use the default location of <code>XDG_CONFIG_HOME</code>. Most maintained tools will use the XDG locations if the environment variables are set.</p> <p>Defining <code>XDG_CONFIG_HOME</code> before installing development tools and applications helps ensure that the right locations are used.</p> <p>Existing configurations are easily migrated to the <code>XDG_CONFIG_HOME</code> directory, either all at once or application by application.  If the configuration is not found in <code>XDG_CONFIG_HOME</code> the application should look for the configuration in the <code>HOME</code> directory.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#where-to-set-environment-variables","title":"Where to Set environment variables","text":"<p>For desktop launchers, edit the <code>.profile</code> file and export a value for <code>XDG_CONFIG_HOME</code>, which should then be used by all applications launched in this way.</p> <p>For example, the <code>XDG_CONFIG_HOME</code> is defined for all applications and <code>SPACEMACSDIR</code> is defined specifically for Spacemacs configuration for Emacs.</p> <pre><code># Ensure XDG_CONFIG_HOME is set when launching apps from destktop\nexport XDG_CONFIG_HOME=$HOME/.config\n\n# Application specific\nexport SPACEMACSDIR=$XDG_CONFIG_HOME/spacemacs\n\n\n# Recommended locations\nexport XDG_DATA_HOME=$HOME/.local/share\nexport XDG_CACHE_HOME=$HOME/.cache\nexport XDG_STATE_HOME=$HOME/.local/state\n</code></pre> <p>To apply these environment variables, logout of the desktop environment, then login again.  Now the environment variables are set.</p> <p>To test before logout/login, in a terminal run the command <code>source ~/.profile</code> and the environment variables will be available in that terminal session.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#command-line","title":"Command Line","text":"<p>The shell and all command line tools will use environment variables in <code>~/.profile</code>.  Or they can be set in the respective resource files for the terminal shell to add environment variables</p> <ul> <li>bash - use <code>~/.bashrc</code></li> <li>zsh - use <code>~/.zprofile</code> or <code>.zshenv</code></li> </ul> <p>For example, in <code>~/.zprofile</code>:</p> <pre><code># Set XDG_CONFIG_HOME for clean management of configuration files\nexport XDG_CONFIG_HOME=\"$XDG_CONFIG_HOME=$HOME/.config\"\n</code></pre>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#zsh-prezto","title":"Zsh - prezto","text":"<p>Prezto is an rich configuration for Zsh that provides aliases, functions, auto completion and prompt themes (including the popular Powerline10k theme). Prezto includes a wide range of optional modules such as git status, autosuggestions (fish shell completion), GPG, etc.</p> <p></p> <p>Install prezto in the <code>XDG_CONFIG_HOME/zsh</code> directory.</p> <pre><code>git clone --recursive https://github.com/sorin-ionescu/prezto.git \"${XDG_CONFIG_HOME}/prezto\"\n</code></pre> <p>Prezto requires <code>~/.zshenv</code> to bootstrap the location of prezto configuration.  The <code>~/.zshenv</code> file can be a symbolic link to <code>XDG_CONFIG_HOME/zsh/.zshenv</code></p> <p>Set the <code>XDG_CONFIG_HOME</code> location to <code>HOME/.config</code> for all applications if not set in <code>~/.profile</code></p> <p>Set the <code>ZDOTDIR</code> location so Zsh can find the Prezto configuration.</p> <pre><code># Set XDG_CONFIG_HOME for clean management of configuration files\nexport XDG_CONFIG_HOME=\"${XDG_CONFIG_HOME:=$HOME/.config}\"\nexport ZDOTDIR=\"${ZDOTDIR:=$XDG_CONFIG_HOME/zsh}\"\n</code></pre> <p>Other application specific environment variables should be added to <code>.zshevn</code> file as well, e.g. <code>SPACEMACSDIR</code> for Spacemacs configuration.</p> <p>TIP: Once installed, any prezto configuration files that will be added can be copied from the <code>.zprezto/runcoms</code> directory to <code>XDG_CONFIG_HOME/zsh</code>, rather than linking as the documentation suggests. This approach minimises the need to merge changes when updating prezto.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#neovim","title":"Neovim","text":"<p>Neovim supports the XDG basedir specification and will use <code>~/.config/nvim</code> directory by default.</p> <p>All the packages installed, such as the excellent Conjure for Clojure development (and many other fun languages), will therefore be part of the <code>~/.config/neovim</code> configuration.</p> <p>Vim does not support the basedir.  However, when Neovim is installed as a .deb package it will be used for the vim command (set via <code>/etc/alternatives/vim</code>)</p> <p>Practicalli Neovim is the start of a new book on setting up Neovim with Clojure, LSP, Treesitter and many other packages, using fennel (a lisp dialect) for its configuration.  More details coming soon.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#emacs-and-spacemacs-configuration","title":"Emacs and Spacemacs Configuration","text":"<p>Emacs will use <code>XDG_CONFIG_HOME/emacs</code> location if it contains an <code>init.el</code> file.</p> <p><code>SPACEMACSDIR</code> environment variable is used by Spacemacs to set the <code>dotspacemacs-directory</code>, defining where to look for the Spacemacs specific <code>init.el</code> file.</p> <p>Set <code>SPACEMACSDIR</code> to <code>XDG_CONFIG_HOME/spacemacs</code></p> <pre><code># Ensure XDG_CONFIG_HOME is set when launching apps from destktop\nexport XDG_CONFIG_HOME=\"$HOME/.config\"\n\n# Ensure Emacs can find the location of Spacemacs configuration\n# when using a desktop launcher\nexport SPACEMACSDIR=\"$XDG_CONFIG_HOME/spacemacs\"\n</code></pre> <p>Move the <code>.spacemacs</code> file to <code>XDG_CONFIG_HOME/spacemacs/init.el</code>.  Or if using <code>~/.spacemacs.d/</code> then move that directory to be the <code>XDG_CONFIG_HOME/spacemacs/</code> directory.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#authinfo-secure-credentials","title":"authinfo secure credentials","text":"<p>Connection credentials that include sensitive data (passwords, developer tokens) can be stored in <code>authinfo.pgp</code>, a PGP encrypted file. This providing an extra level of security for sensitive data.</p> <p>For example, Magit Forge uses authinfo.gpg to define a connection to GitHub or GitLab that includes a developer token.</p> <pre><code>  ;; Use XDG_CONFIG_HOME location or HOME\n  (setq auth-sources (list\n                      (concat (getenv \"XDG_CONFIG_HOME\") \"/authinfo.gpg\")\n                      \"~/.authinfo.gpg\"))\n</code></pre>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#doom-emacs","title":"Doom Emacs","text":"<p>If Emacs configuration is detected in <code>$HOME/.config/emacs</code> then Doom will install its configuration in <code>$HOME/.config/doom</code>, so long as <code>DOOMDIR</code> has not already been configured to a different location by the user.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#git","title":"Git","text":"<p>Git will write to and read from <code>XDG_CONFIG_HOME/git/config</code> as its configuration, if that file exists and <code>~/.gitconfg</code> does not exist.  Otherwise <code>~/.gitconfg</code> is used.</p> <p>Before running any <code>git</code> commands, create a config file in the XDG location</p> <pre><code>mkdir  $XDG_CONFIG_HOME/git &amp;&amp; touch  $XDG_CONFIG_HOME/git/config\n</code></pre> <p><code>git config</code> commands will now update the XDG configuration file, e.g. setting the user identity and configure diff to use the diff3 (shared parent) for merge conflicts</p> <pre><code>git config --global user.name \"John Practicalli\"\ngit config --global user.email \"******+account-name@users.noreply.github.com\"\ngit config --global merge.conflictstyle diff3\n</code></pre> <p>Add an ignore-global file to the <code>XDG_CONFIG_HOME/git</code> directory. Example excludes files can be found at github/gitignore repository or at practicalli/dotfiles</p> <p>Add an excludes file to the Git config file containing the patterns used across all the users projects.</p> <pre><code>git config --global core.excludesFile ~/.config/git/ignore-global\n</code></pre> <p>The git ignore file should be defined with the full path so tools like projectile can find that ignore file.</p> <p><code>XDG_CONFIG_HOME/git/template</code> is a common location for scripts and hooks that should be added to a newly created Git repository, in the <code>.git</code> directory.  The template location is set by <code>init.templatedir</code></p> <pre><code>mkdir  $XDG_CONFIG_HOME/git/template\n\ngit config --global init.templatedir template\n</code></pre>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#clojure-cli","title":"Clojure CLI","text":"<p>The <code>XDG_CONFIG_HOME/clojure</code> directory is the location for the Clojure CLI user level configuration files (e.g. <code>deps.edn</code>, <code>tools/tools.edn</code>).</p> <p>If <code>XDG_CONFIG_HOME</code> is not set or that location is not found, then <code>HOME/.clojure</code> is used instead.</p> <p>If <code>CLJ_CONFIG</code> is set to a value, then Clojure CLI commands will use that instead.</p> <p>Also see Maven and dependencies to manage the <code>$HOME/.m2/repository</code> directory</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#maven-and-dependencies","title":"Maven and dependencies","text":"<p>Clojure CLI and Leiningen use the Maven configuration directory to store Jar files from project (and tooling) dependencies, by default this is located in <code>$HOME/.m2/repository</code>.</p> <p>Jar files from dependencies are considered non-essential (to the Clojure CLI tool) so should be written to the $XDG_CACHE_HOME location, typically <code>$HOME/.cache</code></p> <p>Add the <code>:mvn/local-repo</code> top-level key in the user level deps.edn file to set a location for the Maven repository.  The value should be the full directory path.</p> <pre><code>:mvn/local-repo \"/home/practicalli/.cache/maven/repository\"\n</code></pre> <p>The <code>:mvn/local-repo</code> can also be used in a project deps.edn file or on the command line, i.e. <code>clojure -Sdeps '{:mvn/local-repo \".cache/temp-deps\"}'</code> if the Maven dependencies should be kept separate from all other projects (this scenario is not common).</p> <p>The Maven <code>$HOME/.m2</code> directory also contains several configuration files, <code>maven.config</code>, <code>jvm.config</code> and <code>extensions.xml</code>, so unfortunately conflates configuration files with data files.  Although Clojure CLI does not use these configuration files, it is useful to separate the jar files into a cache.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#clojure-gitlibs","title":"Clojure Gitlibs","text":"<p>Clojure CLI can used dependencies from Git repositories.  To do so, the repository is downloaded into a <code>$HOME/.gitlibs</code> directory, unless the <code>GITLIBS</code> environment variable is set.  As the <code>gitlibs</code> directory contains data for the application, then ideally this would be placed in <code>XDG_CACHE_HOME</code>, under a <code>clojure-gitlibs</code> directory</p> <p>Set the <code>GITLIBS</code> environment variable to determine the location of the local cache directory used to clone dependencies that are Git repositories.</p> <pre><code>export $GITLIBS=$XDG_CACHE_HOME/clojure-libs\n</code></pre> <p>Optionally move the existing <code>$HOME/.gitlibs</code> to the Cache home.</p> <pre><code>mv $HOME/.gitlibs $XDG_CACHE_HOME/clojure-gitlibs\n</code></pre>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#clojure-lsp","title":"Clojure LSP","text":"<p><code>XDG_CONFIG_HOME/clojure-lsp</code> directory is used as the location for Clojure LSP configuration if <code>XDG_CONFIG_HOME</code> is set.  Otherwise, <code>$HOME/.clojure-lsp</code> is used as the configuration.</p> <p>If Clojure LSP was used for for a while, configuration may be in the deprecated <code>~/.lsp</code> directory.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#intellij-idea-and-cursive","title":"Intellij Idea and Cursive","text":"<p>Intellij Idea from version 2020.1 uses the XDG basdir specification locations without the need to set XDG_CONFIG_HOME.</p> <p>Configuration is organised under the ~/.config/JetBrains/ directory with product and version sub-directories, for example:</p> <pre><code>~/.config/JetBrains/IntelliJIdea2022.1\n</code></pre> <p>Intellij IDEA 2020.1 documentation - configuration directories</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#leiningen","title":"Leiningen","text":"<p>Leiningen does not support configuration in <code>XDG_CONFIG_HOME</code>, although there is an outstanding issue to add this as an enhancement from 2016.</p> <p>Once Leiningen is installed, a temporary work-around would be to move the <code>~/.lein</code> directory to <code>XDG_CONFIG_HOME/leiningen</code> and create a symbolic link called <code>~/.lein</code></p> <pre><code>mv ~/.lein $XDG_CONFIG_HOME/leiningen\n\nln -s $XDG_CONFIG_HOME/leiningen ~/.lein\n</code></pre> <p>The <code>lein</code> script uses <code>LEIN_HOME</code> variable, although this is hard-coded in the script to <code>$HOME/.lein</code> and therefore is not usable to set as an operating system environment variable to change the configuration directory location.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#vs-code-and-calva","title":"VS Code and Calva","text":"<p>Unfortunately XDG basedir specification is not currently supported by VS Code and therefore Calva (although I assume the Clojure LSP tooling in Calva will use XDG_CONFIG_HOME)</p> <p>There is an outstanding issue on the VS Code, also from 2016, to revisit the configuration structure and support XDG_CONFIG_HOME.</p> <p>Using the symbolic link workaround, as with Leiningen, should work for VS Code too.</p> <pre><code>mv $HOME/.vscode $XDG_CONFIG_HOME/vscode\nln -s $XDG_CONFIG_HOME/vscode $HOME/.vscode\n</code></pre> <p>It is advisable to close VS Code before moving the configuration, to ensure the configuration has been saved.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/freedesktoporg-xdg-standard-for-clojure-development-tools/#summary","title":"Summary","text":"<p>The XDG basedir specification makes it simple to back up and version a users configuration files as they are all under the one directory, i.e. <code>$HOME/.config</code></p> <p>As data and cache files are in different locations, then few if any ignore files are required to version the configuration files.</p> <p>Migrating is relatively quick and painless and applications can be migrated over time if required.</p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"blog/advent-of-parens-2019---feast-on-clojure-this-holiday-season/","title":"Advent Of Parens 2019 - feast on Clojure this holiday season","text":"<p>The holiday season is know for over indulge, so why not stuff your head full of Clojure and functional programming.  Its far healthier than the alternatives :)</p> <p>To help you indulge, Arne from LambdaIsland, Bobby Towers, Alexander Oloo and I are writing a blog post each day as part of the Advent Of Parens 2019 celebration.  Every day we plan to publish a short posts that share tips and experiences with functional programming and Clojure.</p> <p>You can find the articles I am planning to write on the  practicalli blog project board.</p> <p>While you wait to open these posts each day of December, I am kickstarting your feast of Clojure in this article.</p> <p>I also encourage you to take some time over the holiday season to practice Clojure</p> <ul> <li>Clojure Advent of Code</li> <li> Practicalli Clojure study group</li> </ul>","tags":["clojure","advent-of-parens"]},{"location":"blog/advent-of-parens-2019---feast-on-clojure-this-holiday-season/#discover-new-ideas-with-clojure-videos","title":"Discover new ideas with Clojure videos","text":"<p> Clojure TV YouTube channel has hundreds of videos from Clojure Conj conferences over the last 6 years.  Some of my favourites include</p> <ul> <li> Follow the Data: Product Development in Clojure - Derek Troy-West</li> <li> From Lazy Lisper to Confident Clojurist - Alexander Oloo</li> <li> Interactive Programming for Artificial Intelligence - Dragan Djuric</li> <li> Sherlock Holmes, Consulting Developer - Stuart Halloway</li> </ul> <p>Or just sit back and watch  all the amazing Clojure/conj 2019 talks back to back</p> <p>reClojure Conference videos</p> <p> reClojure conference videos will be available soon, subscribe to find out when the are published</p>","tags":["clojure","advent-of-parens"]},{"location":"blog/advent-of-parens-2019---feast-on-clojure-this-holiday-season/#studying-clojure","title":"Studying Clojure","text":"<p>For the last year I have run a YouTube based study and there are over 50 hours of video,  introducing Clojure concepts and building applications with Clojure and ClojureScript.</p> <p>See the Clojure Study group playlist for all the videos.  I am currently creating videos to introduce Clojure CLI and tools.deps approach to Clojure and ClojureScript projects.</p> <p>TODO create a playlist for just the 4Clojure solutions</p> <p>start learning Clojure CLI and tools.deps approach for Clojure</p> <p>Discuss any of the content that Practicalli creates on the #practicalli channel of the Clojurians Slack community.</p> <p>There are several excellent professional courses and tutorials available to help you deep dive into specific areas.  Take some time out and learn something new for the new year.</p> <ul> <li>Lambda Island - high quality and effective video tutorials on Clojure, with detailed transcripts</li> <li>Purelyfunctional.tv - comprehensive training courses for Clojure</li> <li>Learn re-frame - a detailed video-based course from an experienced JavaScript &amp; ClojureScript developer, Jacek Schae</li> </ul>","tags":["clojure","advent-of-parens"]},{"location":"blog/advent-of-parens-2019---feast-on-clojure-this-holiday-season/#cool-projects-to-try-out","title":"Cool projects to try out","text":"<p> Bobby Towers has some excellent projects that are very creative and inspiring projects, so great fun for all over the holiday season.</p> <ul> <li>Games: Conways Game of Life, Sudoku, Minesweeper, Tic-tac on my toe</li> <li>Music:  MECCA Music Platform, Exploring MIDI files,</li> <li>Graphics:  Convert images into SVG</li> </ul> <p> Michiel Borkent has been a prolific developer in the Clojure community, creating many excellent projects this year.  It is definitely worth investing a little time getting to know these projects</p> <ul> <li> re-find - to find a function based on arguments and expected return value.  Try the  re-find website too.</li> <li>clj-kondo - my favourite Clojure lint tool that can be used interactively in your editor or as a script in a CI or other batch process.</li> <li> jet - a command line tool to transform between JSON, EDN and Transit</li> <li> babashka - when you want to write Clojure rather than a bash script</li> </ul>","tags":["clojure","advent-of-parens"]},{"location":"blog/advent-of-parens-2019---feast-on-clojure-this-holiday-season/#clojure-podcasts","title":"Clojure podcasts","text":"<p>There are many engaging discussions on Clojure and functional programming in the following podcasts.</p> <ul> <li> <p> Apropos cast - an eclectic discussion and collaborative hack session with Clojure.</p> </li> <li> <p>clojurescript podcast - with many Clojure and ClojureScript contributors, giving a deep insight into the language and development aproach.</p> </li> <li> <p>clojure design club - a very enjoyable discussion between two experienced developers working with Clojure, discussing issues raised by the community.</p> </li> <li> <p>cognicast - a long running podcast from the stewards of the Clojure language</p> </li> <li> <p>defn podcast - an enjoyable but occasionally sweary podcast by one of the characters in the Clojure community.</p> </li> <li> <p> The REPL - regular news about Clojure and activities in the community (also a mailing list)</p> </li> <li> <p> JUXT Cast - a new broadcasts from the development team at JUXT, a very active Clojure consultancy company</p> </li> </ul> <p>I listen to these podcasts when I go for a walk in the park or shopping for fresh fruit and vegetables.</p>","tags":["clojure","advent-of-parens"]},{"location":"blog/advent-of-parens-2019---feast-on-clojure-this-holiday-season/#summary","title":"Summary","text":"<p>I hope you enjoy the rich content available in the Clojure community and have a very merry Clojure holiday season.</p> <p>If there are any topics or tips you need help with, please get in touch via the Clojurians Slack community.</p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["clojure","advent-of-parens"]},{"location":"blog/automate-cryogen-clojure-blog-with-github-actions/","title":"Automate Cryogen Clojure blog with GitHub Actions","text":"<p>Practicalli uses Cryogen static site generator for its blog website.  Cryogen is fast and simple to use thanks to the Clojure EDN file used for configuration.</p> <p>Cryogen documentation shows how to publish a Cryogen blog to GitHub pages using Git command.  The deployment can be automated using GitHub actions, so that a new version of the site is deployed when Pull Requests are merged to the specified branch (or on direct commits to that branch).</p>","tags":["static-site","github-action"]},{"location":"blog/automate-cryogen-clojure-blog-with-github-actions/#what-does-the-github-workflow-do","title":"What does the GitHub workflow do?","text":"<p>This is a combination of GitHub actions, each doing a specific part of the automated workflow.</p> <p>The publish job runs on an Ubuntu docker image and the Checkout step performs a git checkout of the project into the docker image.</p> <p>Prepare Java step uses the setup-java action to add Java 11 to the docker image, using the Eclipse Foundation <code>temurin</code> image (OpenJDK / AdoptOpenJDK is now part of the Eclipse Foundation).</p> <p>Install clojure tools step uses the setup-clojure action to add the specified version of Clojure CLI tools (Leiningen and Boot build tools are also supported)</p> <p>Build blog site step calls the Cryogen function using Clojure CLI tools to build the static site</p> <p>Publish to GitHub pages step uses the github-pages-deploy-action to deploy a specific directory, the directory built by Cryogen, to another branch of the original repository or a different repository. If the branch does not exist, the action will create it.</p>","tags":["static-site","github-action"]},{"location":"blog/automate-cryogen-clojure-blog-with-github-actions/#deploying-to-other-repositories","title":"Deploying to other repositories","text":"<p>When deploying the Cryogen site to the same GitHub repository as the source files, the github-pages-deploy-action does not require an explicit token to be added. The action uses the default repository scoped GitHub token.</p> <p>If deploying the site to another repository from that of its source files, create a GitHub secret with a value of a Personal Access Token (PAT). The personal access token should have the least permissions necessary, usually only <code>repo</code>.</p> <p>A GitHub secret can be added at user or organisation level and configured for specific repositories.</p>","tags":["static-site","github-action"]},{"location":"blog/automate-cryogen-clojure-blog-with-github-actions/#add-github-action","title":"Add GitHub Action","text":"<p>Create a file called <code>.github/workflows/cryogen-publish.yml</code> and add a workflow configuration.</p> <pre><code>name: Publish Blog\non:\n  push:\n    branches:\n    - live\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Prepare java\n        uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '11'\n\n      - name: Install clojure tools\n        uses: DeLaGuardo/setup-clojure@3.5\n        with:\n          cli: 1.10.3.943\n\n      - name: Build Blog site\n        run: clojure -M:build\n\n      - name: Publish to GitHub Pages\n        uses: JamesIves/github-pages-deploy-action@4.1.4\n        with:\n          commit-message: ${{ github.event.head_commit.message }}\n          branch: gh-pages                                      # branch to deploy to\n          single-commit: yes                                    # no commit history\n          folder: public/blog                                   # directory to deploy from\n</code></pre>","tags":["static-site","github-action"]},{"location":"blog/automate-cryogen-clojure-blog-with-github-actions/#github-action-configuration-with-token","title":"GitHub Action configuration with token","text":"<p>If deploying to a different repository than the source, then add a token to either a repository, account or organisation secret.  Use a GitHub Personal Access Token for the value of the token secret.</p> <pre><code>      - name: Publish to GitHub Pages\n        uses: JamesIves/github-pages-deploy-action@4.1.4\n        with:\n          commit-message: ${{ github.event.head_commit.message }}\n          token: ${{ secrets.PRACTICALLI_BLOG_PUBLISH_TOKEN }}  # GitHub secret\n          repository-name: practicalli/deployed-blog            # repository to deploy to\n          branch: gh-pages                                      # branch to deploy to\n          single-commit: yes                                    # no commit history\n          folder: public/blog                                   # directory to deploy from\n</code></pre>","tags":["static-site","github-action"]},{"location":"blog/automate-cryogen-clojure-blog-with-github-actions/#deploying-to-aws-s3-bucket","title":"Deploying to AWS S3 bucket","text":"<p>Cryogen can also be published to an Amazon S3 bucket by taking the above GitHub action and replacing the Publish to GitHub Pages step.</p> <p>Add the following step in its place and add GitHub secrets to the Git Repository for AWS access and the name of the AWS bucket.</p> <pre><code>    - name: Publish to AWS S3\n      uses: jakejarvis/s3-sync-action@master\n      with:\n        args: --follow-symlinks --delete --acl public-read\n      env:\n        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}\n        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        AWS_REGION: 'eu-west-2'\n        SOURCE_DIR: 'public/blog'\n</code></pre> <p>NOTE: also check the AWS region is the correct one for your needs</p>","tags":["static-site","github-action"]},{"location":"blog/automate-cryogen-clojure-blog-with-github-actions/#summary","title":"Summary","text":"<p>Once the <code>.github/workflows/cryogent-publish.yml</code> file is committed to the default branch of the repository, any commits to that branch or merged pull requests to that branch will trigger the workflow and publish a new version of the Cryogen static website.</p> <p>Consider adding linters and other GitHub Actions to check for potential issues with markdown and other aspects of the website, to avoid checking in content that may break the website.</p> <p>Setting up monitoring of the website is also recommended, using simple monitoring tools such as StatusCake.</p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["static-site","github-action"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/","title":"Build and run Clojure with Multi-stage Dockerfile","text":"<p>Deployment of a Clojure service is very simple, requiring only an Uberjar (archive file containing the Clojure Project and Clojure run-time) and the Java Run-time Environment (JRE).</p> <p>A Clojure service rarely works in isolation and although many services are access via a network connection (defined in Environment Variables), provisioning containers to build and run Clojure along with any other services can be valuable as complexity of the architecture grows.</p> <p>A Multi-stage <code>Dockerfile</code> is an effective way to build and run Clojure projects in continuous integration pipelines and during local development where multiple services are required for testing.</p> <p>Docker Hub provides a wide range of images, supporting development, continuous integration and system integration testing.</p>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#multi-stage-dockerfile","title":"Multi-stage Dockerfile","text":"<p>A multi-stage <code>Dockerfile</code> contains builder stage and a run-time stage (usually unnamed).  There may also be a common stage used by both bulder and run-time states. </p> <p>The builder stage should be optimised for building the Clojure project, i.e. caching dependencies and layers, building only layers that change.  </p> <p>The run-time stage should be optimised for running the service efficiently and securely, including only essential files for a minimal size.</p> <p>The uberjar created by the builder image is copied over to the run-time image to keep that image as clean and small as possible (to minimise resource use).</p> <p> Example  Multi-stage <code>Dockerfile</code> for Clojure projects derived from the configuration currently used for commercial and open source work.  The example uses make targets, which are Clojure commands defined in the example Makefile</p>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#official-docker-images","title":"Official Docker images","text":"<p>Docker Hub contains a large variety of images, using those tagged with Docker Official Image is recommended.</p> <ul> <li> Clojure - official Docker Image - provides tools to build Clojure projects (Clojure CLI, Leiningen, Boot)</li> <li> Eclipse temurin OpenJDK - official Docker image - built by the  community - provides the Java run-time</li> </ul> <p>Ideally a base image should be used where both builder and run-time images share the same ancestor, this helps maintain consistency between build and run-time environments.</p> <p>The Eclipse OpenJDK image is used by the Clojure docker image, so they implicitly use the same base image without needed to be specified in the project <code>Dockerfile</code>.  The Eclipse OpenJDK image could be used as a base image in the <code>Dockerfile</code> but it would mean repeating (and maintaining) much the work done by the official Clojure image)</p> Alternative Docker images <ul> <li>CircleCI Convenience Images =&gt; Clojure - an optimised Clojure image for use with the CircleCI service</li> <li>Amazon Corretto is an alternative version of OpenJDK</li> </ul> Official Docker Image definition <p>An Official Docker Image means the configuration of that image follows the Docker recommended practices, is well documented and designed for common use cases.  </p> <p>There is no implication as to the correctness of tools, languages or service that image provides, only in the means in which they are provided.</p>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#clojure-image-as-builder-stage","title":"Clojure image as Builder stage","text":"<p>Practicalli uses the latest Clojure CLI release and the latest Long Term Support (LTS) version of Eclipse Temurin (OpenJDK).  Alpine Linux is used to keep the image file size as small as possible, reducing local resource requirements (and image download time).</p> <p>Builder Image</p> <pre><code>FROM clojure:temurin-17-alpine AS builder\n</code></pre> <p><code>CLOJURE_VERSION</code> will over-ride the version of Clojure CLI in the Clojure image (which defaults to latest Clojure CLI release). Or choose an image that has a specific Clojure CLI version, e.g. <code>temurin-17-tools-deps-1.11.1.1182-alpine</code></p> <p>Builder Image with Clojure CLI version</p> <pre><code>FROM clojure:temurin-17-alpine AS builder\nENV CLOJURE_VERSION=1.11.1.1182\n</code></pre> <p>Create directory for building the project code and set it as the working directory within the Docker container to give RUN commands a path to execute from.</p> <p>Create working directory</p> <pre><code>RUN mkdir -p /build\nWORKDIR /build\n</code></pre>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#cache-dependencies","title":"Cache Dependencies","text":"<p>Clojure CLI is used to download dependencies for the project and any other tooling used during the build stage, e.g. test runners, packaging tools to create an uberjar.  Dependency download should only occur once, unless the <code>deps.edn</code> file changes.</p> <p>Copy the <code>deps.edn</code> file to the build stage and use the <code>clojure -P</code> prepare (dry run) command to download the dependencies without running any Clojure code or tools.</p> <p>Prepare dependencies</p> <pre><code>COPY deps.edn /build/\nRUN clojure -P -X:build\n</code></pre> <p>The dependencies are cached in the Docker overlay (layer) and this cache will be used on successive docker builds unless the <code>deps.edn</code> file is change.</p> <p><code>deps.edn</code> in this example contains the project dependencies and <code>:build</code> alias used build the Uberjar.</p>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#build-uberjar","title":"Build Uberjar","text":"<p>Copy all the project files to the docker builder working directory, creating another overlay.</p> <p>Copying the src and other files in a separate overlay to the <code>deps.edn</code> file ensures that changes to the Clojure code or configuration files does not trigger downloading of the dependencies again.</p> <p>Run the <code>tools.build</code> command to generate an Uberjar.</p> <p>Build Project Uberjar</p> <pre><code>COPY ./ /build\nRUN clojure -T:build uberjar\n</code></pre> <p><code>:build</code> is an alias to include Clojure tools.build dependencies which is used to build the Clojure project into an Uberjar.</p> Using make task for build <p>When using make for the build, also copy the <code>Makefile</code> to the builder stage and call the <code>deps</code> target to download the dependencies </p> <p>Ensure <code>deps</code> target in the <code>Makefile</code> depends on the <code>deps.edn</code> file so the target is skipped if that file has not changed.</p> <p><pre><code>COPY deps.edn Makefile /build/\nRUN make deps\n</code></pre> call the <code>dist</code> target to build the Uberjar <pre><code>COPY ./ /build\nRUN RUN make dist\n</code></pre></p>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#docker-ignore-patterns","title":"Docker Ignore patterns","text":"<p><code>.dockerignore</code> file in the root of the project defines file and directory patterns that Docker will ignore with the COPY command.  Use <code>.dockerignore</code> to avoid copying files that are not required for the build</p> <p>Keep the <code>.dockerignore</code> file simple by excluding all files with <code>*</code> pattern and then use the <code>!</code> character to explicitly add files and directories that should be copied</p> <p>Docker ignore patterns</p> <pre><code># Ignore all files\n*\n\n# Include Clojure code and config\n!deps.edn\n!Makefile\n!src/\n!test/\n!test-data/\n!resources/\n</code></pre> <p><code>Makefile</code> and <code>test-data</code> directories are commonly used by Practicalli, although in general are not widely needed.</p>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#openjdk-for-run-time-stage","title":"OpenJDK for Run-time stage","text":"<p>The Alpine Linux version of the Eclipse Temurin image is used as it is around 5Mb in size, compared to 60Mb or more of other operating system images.</p> <p>Alpine Linux image with OpenJDK for Run-time stage</p> <pre><code>FROM eclipse-temurin:17-alpine\n</code></pre> <p>Run-time containers are often cached in a repository, e.g. AWS Container Repository (ECR).  <code>LABEL</code> adds metadata to the container helping it to be identified in a repository or in a local development environment.</p> <p>Add meta data to the docker configuration</p> <pre><code>LABEL org.opencontainers.image.authors=\"nospam+dockerfile@practicall.li\"\nLABEL io.github.practicalli.service=\"Gameboard API Service\"\nLABEL io.github.practicalli.team=\"Practicalli Engineering Team\"\nLABEL version=\"1.0\"\nLABEL description=\"Gameboard API service\"\n</code></pre> <p>Use <code>docker inspect</code> to view the metadata</p> <p>Optionally, add packages to support running the service or helping to debug issue in the container when it is running.  For example, add <code>dumb-init</code> to manage processes, <code>curl</code> and <code>jq</code> binaries for manual running of system integration testing scripts for API testing.</p> <p><code>apk</code> is the package tool for Alpine Linux and <code>--no-cache</code> option ensures the install file is not part of the resulting image, saving resources.  Alpine Linux recommends setting versions to use any point release with the <code>~=</code> approximately equal version, so any same major.minor version of the package can be used.</p> <p>Additional Alpine Packages</p> <pre><code>RUN apk add --no-cache \\\n    dumb-init~=1.2.5 \\\n    curl~=8.0.1 \\\n    jq~=1.6\n</code></pre> <p>Check Alpine packages if new major versions are no longer available (low frequency)</p>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#create-non-root-group-and-user-to-run-service-securely","title":"Create Non-root group and user to run service securely","text":"<p>Docker runs as root user by default and if a container is compromised the root permissions and could lead to a compromised system.  Add a user and group to the run-time image and create a directory to contain service archive, owned by the non-root user.  Then instruct docker that all future commands should run as the non-root user</p> <p>Non-root account creation</p> <pre><code>RUN addgroup -S practicalli &amp;&amp; adduser -S practicalli -G practicalli\nRUN mkdir -p /service &amp;&amp; chown -R practicalli. /service\nUSER practicalli\n</code></pre>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#copy-uberjar-to-run-time-stage","title":"Copy Uberjar to run-time stage","text":"<p>Create a directory to run the service or use a known existing path that will not clash with any existing files from the image.</p> <p>Set the working directory and copy the uberjar archive file from Builder image</p> <p>Copy Uberjar to run-time stage</p> <pre><code>RUN mkdir -p /service\nWORKDIR /service\nCOPY --from=builder /build/practicalli-service.jar /service/practicalli-service.jar\n</code></pre> <p>Optionally, add system integration testing scripts to the run-time stage for testing from within the docker container.</p> <p>Copy test scripts</p> <pre><code>RUN mkdir -p /service/test-scripts\nCOPY --from=builder /build/test-scripts/curl--* /service/test-scripts/\n</code></pre>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#set-service-environment-variables","title":"Set Service Environment variables","text":"<p>Define values for environment variables should they be required (usually for debugging), ensuring no sensitive values are used. Environment variables are typically set by the service provisioning the containers (AWS ECS / Kubernettes) or on the local OS host during development (Docker Desktop).</p> <p>Environment Variables</p> <pre><code># optional over-rides for Integrant configuration\n# ENV HTTP_SERVER_PORT=\n# ENV MYSQL_DATABASE=\nENV SERVICE_PROFILE=prod\n</code></pre>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#optimising-the-container-for-java-virtual-machine","title":"Optimising the container for Java Virtual Machine","text":"<p>Clojure Uberjar runs on the Java Virtual Machine which is a highly optimised environment that rarely needs adjusting, unless there are noticeable performance or resource issue use.  The most likely option to set is the minimum and maximum heap sizes, i.e. <code>-XX:MinRAMPercentage</code> and <code>-XX:MaxRAMPercentage</code>.</p> <p><code>java -XshowSettings -version</code> displays VM settings (vm), Property settings (property), Locale settings (locale), Operating System Metrics (system) and the version of the JVM used.  Add the category name to show only a specific group of settings, e.g. <code>java -XshowSettings:system -version</code>.</p> <p><code>JDK_JAVA_OPTIONS</code> can be used to tailor the operation of the Java Virtual Machine, although the benefits and constraints of options should be well understood before using them (especially in production).</p> <p>Example: show system settings on startup, force container mode and set memory heap maximum to 85% of host memory size.</p> <p>Java Virtual Machine (JVM) options</p> <pre><code>ENV JDK_JAVA_OPTIONS \"-XshowSettings:system -XX:+UseContainerSupport -XX:MaxRAMPercentage=85\"\n</code></pre> <p>Relative heap memory settings (<code>-XX:MaxRAMPercentage</code>) should be used for containers rather than the fixed value options (<code>-Xmx</code>) as the provisioning service for the container may control and change the resources available to a container on deployment (especially a Kubernettes system).</p> <p>Options that are most relevant to running Clojure &amp; Java Virtual Machine in a container include:</p> <ul> <li><code>-XshowSettings:system</code> display (container) system resources on JVM startup</li> <li><code>-XX:InitialRAMPercentage</code> Percentage of real memory used for initial heap size</li> <li><code>-XX:MaxRAMPercentage</code> Maximum percentage of real memory used for maximum heap size</li> <li><code>-XX:MinRAMPercentage</code> Minimum percentage of real memory used for maximum heap size on systems with small physical memory</li> <li><code>-XX:ActiveProcessorCount</code> specifies the number of CPU cores the JVM should use regardless of container detection heuristics</li> <li><code>-XX:\u00b1UseContainerSupport</code> force JVM to run in container mode, disabling container detection (only useful if JVM not detecting container environment)</li> <li><code>-XX:+UseZGC</code> low latency Z Garbage collector (read the Z Garbage collector documentation and understand the trade-offs before use) - the default Hotspot garbage collector is the most effective choice for most services</li> </ul> <p>Without performance testing of a specific Clojure service and analysis of the results, let the JVM use its own heuristics to determine the most optimum strategies it should use</p>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#provide-access-to-running-clojure-service","title":"Provide Access to running Clojure service","text":"<p>If Clojure service listens to network requests when running, then the port it is listening on should be exposed so the world outside the container can communicate to the Clojure service.</p> <p>e.g. expose port of HTTP Server that runs the Clojure service</p> <p>Expose Port of Clojure service</p> <pre><code>EXPOSE 8080\n</code></pre>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#command-to-run-the-service","title":"Command to run the service","text":"<p>Finally define how to run the Clojure service in the container.  The <code>java</code> command is used with the <code>-jar</code> option to run the Clojure service from the Uberjar archive.</p> <p>The <code>java</code> command will use arguments defined in <code>JDK_JAVA_OPTIONS</code> automatically.</p> <p>ENTRYPOINT directive defines the command to run the service</p> <p>Define entrypoint to run the Clojure service</p> <pre><code>ENTRYPOINT [\"java\", \"-jar\", \"/service/practicalli-service.jar\"]\n</code></pre> Understanding the Docker image ENTRYPOINT <p><code>ENTRYPOINT</code> is the recommended way to run a service in Docker.  <code>CMD</code> can be used to pass additional arguments to the <code>ENTRYPOINT</code> command, or used instead of <code>ENTRYPOINT</code>.</p> <p><code>jshell</code>is the default <code>ENTRYPOINT</code> for the Eclipse Temurin image, so <code>jshell</code> will run if an <code>ENTRYPOINT</code> of <code>CMD</code> directive is not included in the run-time stage of the <code>Dockerfile</code>.</p> <p>The <code>ENTRYPOINT</code> command runs as process id 1 (PID 1) inside the docker container.  In a Linux system PID 1 should respond to all TERM and SIGTERM signals.</p> <p>dump-init provides a simple process supervisor and init system, designed to run as PID 1 and manage all signals and child processes effectively.</p> <p>Use <code>dumb-init</code> as the <code>ENTRYPOINT</code> command and <code>CMD</code> to pass the java command to start the Clojure service as an argument.  <code>dumb-init</code> ensures <code>TERM</code> signals are sent to the Java process and all child processes are cleaned up on shutdown.</p> <pre><code>ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"java\", \"-jar\", \"/service/practicalli-service.jar\"]\n</code></pre> <p>Alternatively, run dumb-jump and java within the <code>ENTRYPOINT</code> directive, <code>ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"java\", \"-jar\", \"/service/practicalli-service.jar\"]</code></p>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#build-and-run-with-docker","title":"Build and Run with docker","text":"<p>Ensure docker services are running, i.e. start docker desktop.</p> <p>Build the service and create an image to run the Clojure service in a container with <code>docker build</code>.  Use a <code>--tag</code> to help identify the image and specify the context (in this example the root directory of the current project, <code>.</code>)</p> <pre><code>docker build --tag practicalli/service-name:1.1 .\n</code></pre> <p>After the first time building the docker image, any parts of the build that havent changed will use their respective cached layers in the builder stage.  This can lead to very fast, even zero time builds.</p> <p></p> <p>Maximising the docker cache by careful consideration of command order and design in a <code>Dockerfile</code> can have a significant positive affect on build speed. Each command is effectively a layer in the Docker image and if its respective files have not changed, then the cached version of the command will be run</p> <p>Run the built image in a docker container using <code>docker run</code>, publishing the port number so it can be used from the host (developer environment or deployed environment).  Use the name of the image created by the tag in the docker build command.</p> <pre><code>docker run --publish 8080:8080 practicalli/service-name\n</code></pre> <p>Docker Compose to orchestrate services locally</p> <p>Consider creating a Docker <code>compose.yml</code> file that defines all the services that should be run to support local development </p> <p>run <code>docker compose up</code> to start all the services, including pauses for heath checks where service startup depends on other services.</p>","tags":["docker","clojure","java","jvm"]},{"location":"blog/build-and-run-clojure-with-multi-stage-dockerfile/#summary","title":"Summary","text":"<p>A Multi-stage <code>Dockerfile</code> is an effective way of building and running Clojure projects, especially as the architecture grows in complexity.</p> <p>Organising the commands in the <code>Dockerfile</code> to maximise the use of docker cache will speed up the build time by skipping tasks that would not change the resulting image.</p> <p>Consider creating a <code>docker-compose.yaml</code> file to orchestrate services that are required for development of the project and local system integration testing.</p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["docker","clojure","java","jvm"]},{"location":"blog/building-emacs-28-on-ubuntu-linux/","title":"Building Emacs 28 on Ubuntu Linux","text":"<p>Emacs 28.1 is a feature packed release and includes native compilation to significantly increase the speed of all Emacs software packages installed.  This is a very noticeable difference, especially when Emacs is at the center of your developer workflow.</p> <p>Ubuntu hasn't packaged Emacs 28.1 yet, although its usually straight forward to build Emacs yourself.</p>"},{"location":"blog/building-emacs-28-on-ubuntu-linux/#a-very-brief-summary","title":"A very brief summary","text":"<pre><code>sudo apt build-dep emacs &amp;&amp; /\nsudo apt install libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev gnutls-bin\n</code></pre> <p>Download Emacs 28 source code and open a terminal in the root of the extracted emacs28-1 directory</p> <pre><code>export CC=/usr/bin/gcc-10  &amp;&amp; export CXX=/usr/bin/gcc-10 &amp;&amp; ./autogen.sh &amp;&amp; ./configure --with-native-compilation &amp;&amp; /\nmake -j$(proc)  &amp;&amp; /\nsudo make install\n</code></pre> <p>Read the rest of the article for a more detailed description</p>"},{"location":"blog/building-emacs-28-on-ubuntu-linux/#prepare-ubuntu","title":"Prepare Ubuntu","text":"<p>Open <code>Software &amp; Updates</code> and ensure the Source Code source is enabled and reload the package list (or run <code>sudo apt update</code> in a terminal after adding Source Code)</p> <p></p> <p>Ask Ubuntu to install the packages required to build Emacs (there will be quite a few packages if this is the first software built with GCC on the operating system)</p> <pre><code>sudo apt build-dep -y emacs\n</code></pre> <p>The previous approach was to use <code>sudo apt-get install build-essential gcc git-core</code>. Using build-deps manages the set of packages required as Emacs evolves.</p> <p>Install some additional libraries to support the newest features of Emacs, native compilation of Emacs packages (<code>libgccjit</code>) and fast JSON processing (<code>libjansson</code>).  These really boost performance, so are important to add.</p> <pre><code>sudo apt install libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev\n</code></pre> <p>On Ubuntu 20.04 <code>sudo apt-get install gnutls-bin</code>  removes a potential issue from an older certificates library</p>"},{"location":"blog/building-emacs-28-on-ubuntu-linux/#preparing-emacs-source-code","title":"Preparing Emacs source code","text":"<p>Download Emacs 28.1 source from a nearby GNU mirror, either tar.gz or tar.xz</p> <p>Extract the source code using nautilus, file-roller or in a terminal with the command <code>tar zvxf emacs-28.1.tar.xz</code></p> <p>In a terminal window, change into the emacs28.1 directory</p> <pre><code>cd emacs28-1\n</code></pre> <p>Set <code>CC</code> and <code>CXX</code> environment variables to inform the Emacs configuration script as to the location of gcc-10, otherwise it fails to find libgccjit</p> <pre><code>export CC=/usr/bin/gcc-10 &amp;&amp; export CXX=/usr/bin/gcc-10\n</code></pre> <p>If CC and CXX environment variables are not set, the configure script will not find important libraries and report errors such as: <code>configure: error: ELisp native compiler was requested, but libgccjit was not found.</code></p> <p>Run the autogen script to create a configure script specific to your operating system.</p> <pre><code>./autogen.sh\n</code></pre> <p>Run the configuration script with the native compilation flag.  This script will check the operating system for tools and libraries needed to build Emacs on your operating system.</p> <pre><code>./configure --with-native-compilation\n</code></pre> <p>Check the output of <code>./configure</code> was successful, see the end of this article for an example.  Ignore warnings about movemail if not using Emacs for local email management.</p> <p><code>./configure --help</code> lists available flags. Generally features are enabled if the required libraries are installed on the operating system. A noticeable exception is native compilation, as its a relatively new feature and not enabled by default.</p>"},{"location":"blog/building-emacs-28-on-ubuntu-linux/#building-emacs-locally","title":"Building Emacs locally","text":"<p>Build Emacs using all the CPU's of your computer.  <code>-j</code> flag specifies the number of CPU's to use, <code>nproc</code> command returns the total number of CPU's for the computer (real and virtual cores combined).</p> <pre><code>make -j$(nproc)\n</code></pre> <p>Run Emacs using the <code>-Q</code> option to check Emacs runs without using a users configuration file (e.g. without loading an `~/.emacs.d/ configuration)</p> <pre><code>./src/emacs -Q\n</code></pre> <p><code>C-x C-c</code> to quit Emacs.</p> <p>If Emacs runs then it is ready to install.</p>"},{"location":"blog/building-emacs-28-on-ubuntu-linux/#install-emacs-system-wide","title":"Install Emacs system wide","text":"<p>Install <code>emacs</code> and <code>emacsclient</code> to <code>/usr/local/bin</code> along with supporting libraries and man pages using the Makefile</p> <pre><code>sudo make install\n</code></pre> <p>To install in a different location, pass the full path using the <code>--prefix</code> option to make, e.g <code>make install --prefix /opt/emacs</code></p>"},{"location":"blog/building-emacs-28-on-ubuntu-linux/#running-emacs","title":"Running Emacs","text":"<p>If the default <code>/usr/local</code> path was used to install Emacs, then the <code>emacs</code> and <code>emacsclient</code> binary files are already on the executable path</p> <p>In a terminal, run the emacs command</p> <pre><code>emacs\n</code></pre> <p>If using Emacs 28 with Spacemacs for the first time, all Spacemacs packages in your configuration will be downloaded and compiled.  This may take 5-15 minutes and Emacs may make full use of your CPU (spawning several emacs processes on multi-core computers)</p> <p>Leave Emacs for a few minutes running until the CPU activity has subsided and then consider restarting Emacs to ensure the packages have been loaded in the correct order.</p> <p>Expect to see lots of warning messages when installing more than 250 emacs packages.  Ignore these warnings until all packages have been installed.  If warnings still occur after restarting Emacs, then start investigating (or ask questions on #spacemacs channel in the Clojurians Slack community)</p>"},{"location":"blog/building-emacs-28-on-ubuntu-linux/#removing-emacs","title":"Removing Emacs","text":"<p>In the Emacs source code directory where Emacs was built, use the Makefile to remove the Emacs binaries, libraries and man pages.</p> <pre><code>sudo make uninstall\n</code></pre>"},{"location":"blog/building-emacs-28-on-ubuntu-linux/#emacs-build-configure-output","title":"Emacs build configure output","text":"<p>Typical output of  <code>./configure --with-native-compilation</code></p> <p>Almost all configuration options should be yes, although there are a few legacy libraries or settings for other OSs that should be no.</p> <pre><code>Configured for 'x86_64-pc-linux-gnu'.\n\n  Where should the build process find the source code?    .\n  What compiler should emacs be built with?               /usr/bin/gcc-10 -g3 -O2\n  Should Emacs use the GNU version of malloc?             no\n    (The GNU allocators don't work with this system configuration.)\n  Should Emacs use a relocating allocator for buffers?    no   (use operating system allocator)\n  Should Emacs use mmap(2) for buffer allocation?         no  (use operating system mmap)\n  What window system should Emacs use?                    x11\n  What toolkit should Emacs use?                          GTK3\n  Where do we find X Windows header files?                Standard dirs\n  Where do we find X Windows libraries?                   Standard dirs\n  Does Emacs use -lXaw3d?                                 no  (superseded by gtk)\n  Does Emacs use -lXpm?                                   yes\n  Does Emacs use -ljpeg?                                  yes\n  Does Emacs use -ltiff?                                  yes\n  Does Emacs use a gif library?                           yes -lgif\n  Does Emacs use a png library?                           yes -lpng16 -lz\n  Does Emacs use -lrsvg-2?                                yes\n  Does Emacs use cairo?                                   yes\n  Does Emacs use -llcms2?                                 yes\n  Does Emacs use imagemagick?                             no  (deprecated Emacs 27.1 - security issues)\n  Does Emacs use native APIs for images?                  no  (only for MS-Windows)\n  Does Emacs support sound?                               yes\n  Does Emacs use -lgpm?                                   yes\n  Does Emacs use -ldbus?                                  yes\n  Does Emacs use -lgconf?                                 no\n  Does Emacs use GSettings?                               yes\n  Does Emacs use a file notification library?             yes -lglibc (inotify)\n  Does Emacs use access control lists?                    yes -lacl\n  Does Emacs use -lselinux?                               yes\n  Does Emacs use -lgnutls?                                yes\n  Does Emacs use -lxml2?                                  yes\n  Does Emacs use -lfreetype?                              yes\n  Does Emacs use HarfBuzz?                                yes\n  Does Emacs use -lm17n-flt?                              yes\n  Does Emacs use -lotf?                                   yes\n  Does Emacs use -lxft?                                   no\n  Does Emacs use -lsystemd?                               yes\n  Does Emacs use -ljansson?                               yes\n  Does Emacs use the GMP library?                         yes\n  Does Emacs directly use zlib?                           yes\n  Does Emacs have dynamic modules support?                yes\n  Does Emacs use toolkit scroll bars?                     yes\n  Does Emacs support Xwidgets?                            no  (deprecated)\n  Does Emacs have threading support in lisp?              yes\n  Does Emacs support the portable dumper?                 yes\n  Does Emacs support legacy unexec dumping?               no\n  Which dumping strategy does Emacs use?                  pdumper\n  Does Emacs have native lisp compiler?                   yes\n</code></pre>"},{"location":"blog/building-emacs-28-on-ubuntu-linux/#references","title":"References","text":"<ul> <li>Emacs 28.1 whats new - a very detailed description of new features in Emacs 28.1</li> <li>Emacs Wiki - Building Emacs - base instructions for building Emacs</li> <li>Ubuntu Emacs LISP team PPA - nightly builds from the latest Emacs commits</li> </ul> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>"},{"location":"blog/build-emacs-from-source-on-debian-linux/","title":"Build Emacs from source on Debian Linux","text":"<p>Emacs 29 is the current stable release, adding major features: Eglot LSP client, Tree-Sitter language parser and <code>package.el</code> package install from Git repositories. </p> <p>Building from source is a convenient way to try Emacs features in advance, especially useful for those maintaining or developing new tools on top of Emacs.</p> Emacs 29 Features <p>Emacs 29 - what to expect - a brief summary of the major features</p>","tags":["debian","spacemacs","emacs"]},{"location":"blog/build-emacs-from-source-on-debian-linux/#building-steps-for-the-impatient","title":"Building steps for the impatient","text":"<p>Open a terminal and switch to the adminstrator account</p> <pre><code>su -\n</code></pre> <p>Add debian packages to support building Emacs</p> <pre><code>apt build-dep emacs &amp;&amp; \\\napt install libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev gnutls-bin libtree-sitter-dev\n</code></pre> <p>Clone Emacs 29 source code, configure and build emacs and then install (in /usr/local/bin/)</p> <pre><code>git clone --branch emacs-29 git://git.savannah.gnu.org/emacs.git emacs-29 &amp;&amp; \\\ncd emacs-29 &amp;&amp; \\\nexport CC=/usr/bin/gcc-10 &amp;&amp; \\\nexport CXX=/usr/bin/gcc-10 &amp;&amp; \\ \n./autogen.sh &amp;&amp; \\\n./configure --with-native-compilation=aot &amp;&amp; \\\nmake -j$(proc)  &amp;&amp; \\\nmake install\n</code></pre> <p>Skip the <code>--branch</code> argument for the very latest commits to Emacs which will effectively become Emacs 30 some time in the next year or so</p> <p>Read the rest of the article for a detailed description of this workflow</p>","tags":["debian","spacemacs","emacs"]},{"location":"blog/build-emacs-from-source-on-debian-linux/#prepare-debian","title":"Prepare Debian","text":"<p>Open a terminal and switch to the adminstrator account</p> <pre><code>su -\n</code></pre> <p>Use the Debian package manager to install the build dependencies for the Emacs package. </p> <p>Debian installs the packages required to build Emacs, there will be many package to install if this is the first software is being built with GCC on the operating system.</p> <pre><code>apt build-dep -y emacs\n</code></pre> <p>Using build-deps manages the set of packages required as Emacs evolves.</p> <p>Install library packages to support the newest features of Emacs, e.g. native compilation of Emacs packages (<code>libgccjit</code>), fast JSON processing (<code>libjansson</code>) and tree-sitter support.  These features can significantly boost performance.</p> <pre><code>sudo apt install libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev libtree-sitter-dev\n</code></pre> <p><code>sudo apt-get install gnutls-bin</code> removes a potential issue from an older certificates library install</p>","tags":["debian","spacemacs","emacs"]},{"location":"blog/build-emacs-from-source-on-debian-linux/#preparing-emacs-source-code","title":"Preparing Emacs source code","text":"<p>Use a Git client to clone the latest code from the Emacs repository, or open a terminal and use the Git command line client</p> <pre><code>git clone git://git.savannah.gnu.org/emacs.git\n</code></pre> <p>To build version of Emacs that is already release, Download source from a nearby GNU mirror, either tar.gz or tar.xz</p> <p>Change into the cloned directory</p> <pre><code>cd emacs\n</code></pre> <p>Set <code>CC</code> and <code>CXX</code> environment variables to inform the Emacs configuration script as to the location of gcc-10, otherwise it fails to find libgccjit</p> <pre><code>export CC=/usr/bin/gcc-10 &amp;&amp; export CXX=/usr/bin/gcc-10\n</code></pre> <p>If CC and CXX environment variables are not set, the configure script will not find important libraries and report errors such as: <code>configure: error: ELisp native compiler was requested, but libgccjit was not found.</code></p> <p>Run the autogen script to create a configure script specific to your operating system.</p> <pre><code>./autogen.sh\n</code></pre> <p>Run the configuration script with the native compilation flag, to compile Emacs native Elisp files during the Emacs compilation rather than when first running Emacs.  This script will check the operating system for tools and libraries needed to build Emacs on your operating system.</p> <pre><code>./configure --with-native-compilation=aot\n</code></pre> <p>Check the output of <code>./configure</code> was successful, see the end of this article for an example.  Ignore warnings about movemail if not using Emacs for local email management.</p> List available Emacs build flags <p><code>./configure --help</code> lists available flags. Generally features are enabled if the required libraries are installed on the operating system.</p> <p>A noticeable exception is native compilation, as its a relatively new feature and not enabled by default.</p>","tags":["debian","spacemacs","emacs"]},{"location":"blog/build-emacs-from-source-on-debian-linux/#building-emacs-locally","title":"Building Emacs locally","text":"<p>Build Emacs using all the CPU's of your computer.  <code>-j</code> flag specifies the number of CPU's to use, <code>nproc</code> command returns the total number of CPU's for the computer (real and virtual cores combined).</p> <pre><code>make -j$(nproc)\n</code></pre> <p>Run Emacs using the <code>-Q</code> option to check Emacs runs without using a users configuration file (e.g. without loading an `~/.emacs.d/ configuration)</p> <pre><code>./src/emacs -Q\n</code></pre> <p><code>C-x C-c</code> to quit Emacs.</p> <p>If Emacs runs then it is ready to install.</p>","tags":["debian","spacemacs","emacs"]},{"location":"blog/build-emacs-from-source-on-debian-linux/#install-emacs-system-wide","title":"Install Emacs system wide","text":"<p>Install <code>emacs</code> and <code>emacsclient</code> to <code>/usr/local/bin</code> along with supporting libraries and man pages using the Makefile</p> <pre><code>make install\n</code></pre> <p>To install in a different location, pass the full path using the <code>--prefix</code> option to make, e.g <code>make install --prefix /opt/emacs</code></p>","tags":["debian","spacemacs","emacs"]},{"location":"blog/build-emacs-from-source-on-debian-linux/#running-emacs","title":"Running Emacs","text":"<p>If the default <code>/usr/local</code> path was used to install Emacs, then the <code>emacs</code> and <code>emacsclient</code> binary files are already on the executable path</p> <p>In a terminal, run the emacs command</p> <pre><code>emacs\n</code></pre> Spacemacs installs packages for a version of Emacs <p>Using a different version of Emacs with Spacemacs for the first time will download and compile all the pages in the Spacemacs configuration.  </p> <p>When native compliation is enabled, many minutes are required to navitvely compile each and every Emacs package.</p> <p>Leave Emacs for a few minutes running until the CPU activity has subsided and then consider restarting Emacs to ensure the packages have been loaded in the correct order.</p> <p>Expect to see lots of warning messages when installing more than 250 emacs packages.  Ignore these warnings until all packages have been installed.  If warnings still occur after restarting Emacs, then start investigating (or ask questions on #spacemacs channel in the Clojurians Slack community)</p>","tags":["debian","spacemacs","emacs"]},{"location":"blog/build-emacs-from-source-on-debian-linux/#removing-emacs","title":"Removing Emacs","text":"<p>In the Emacs source code directory where Emacs was built, use the Makefile to remove the Emacs binaries, libraries and man pages.</p> <pre><code>make uninstall\n</code></pre>","tags":["debian","spacemacs","emacs"]},{"location":"blog/build-emacs-from-source-on-debian-linux/#emacs-build-configure-output","title":"Emacs build configure output","text":"<p>Typical output of  <code>./configure --with-native-compilation</code></p> <p>Almost all configuration options should be yes, although there are a few legacy libraries or settings for other OSs that should be no.</p> <pre><code>Configured for 'x86_64-pc-linux-gnu'.\n\n  Where should the build process find the source code?    .\n  What compiler should emacs be built with?               /usr/bin/gcc-10 -g3 -O2\n  Should Emacs use the GNU version of malloc?             no\n    (The GNU allocators don't work with this system configuration.)\n  Should Emacs use a relocating allocator for buffers?    no\n  Should Emacs use mmap(2) for buffer allocation?         no\n  What window system should Emacs use?                    x11\n  What toolkit should Emacs use?                          GTK3\n  Where do we find X Windows header files?                Standard dirs\n  Where do we find X Windows libraries?                   Standard dirs\n  Does Emacs use -lXaw3d?                                 no\n  Does Emacs use -lXpm?                                   yes\n  Does Emacs use -ljpeg?                                  yes\n  Does Emacs use -ltiff?                                  yes\n  Does Emacs use a gif library?                           yes -lgif\n  Does Emacs use a png library?                           yes -lpng16 -lz\n  Does Emacs use -lrsvg-2?                                yes\n  Does Emacs use -lwebp?                                  no\n  Does Emacs use -lsqlite3?                               yes\n  Does Emacs use cairo?                                   yes\n  Does Emacs use -llcms2?                                 yes\n  Does Emacs use imagemagick?                             no\n  Does Emacs use native APIs for images?                  no\n  Does Emacs support sound?                               yes\n  Does Emacs use -lgpm?                                   yes\n  Does Emacs use -ldbus?                                  yes\n  Does Emacs use -lgconf?                                 no\n  Does Emacs use GSettings?                               yes\n  Does Emacs use a file notification library?             yes -lglibc (inotify)\n  Does Emacs use access control lists?                    yes -lacl\n  Does Emacs use -lselinux?                               yes\n  Does Emacs use -lgnutls?                                yes\n  Does Emacs use -lxml2?                                  yes\n  Does Emacs use -lfreetype?                              yes\n  Does Emacs use HarfBuzz?                                yes\n  Does Emacs use -lm17n-flt?                              yes\n  Does Emacs use -lotf?                                   yes\n  Does Emacs use -lxft?                                   no\n  Does Emacs use -lsystemd?                               yes\n  Does Emacs use -ljansson?                               yes\n  Does Emacs use -ltree-sitter?                           yes\n  Does Emacs use the GMP library?                         yes\n  Does Emacs directly use zlib?                           yes\n  Does Emacs have dynamic modules support?                yes\n  Does Emacs use toolkit scroll bars?                     yes\n  Does Emacs support Xwidgets?                            no\n  Does Emacs have threading support in lisp?              yes\n  Does Emacs support the portable dumper?                 yes\n  Does Emacs support legacy unexec dumping?               no\n  Which dumping strategy does Emacs use?                  pdumper\n  Does Emacs have native lisp compiler?                   yes\n  Does Emacs use version 2 of the X Input Extension?      yes\n  Does Emacs generate a smaller-size Japanese dictionary? no\n</code></pre>","tags":["debian","spacemacs","emacs"]},{"location":"blog/build-emacs-from-source-on-debian-linux/#emacs-29-configuration-options","title":"Emacs 29 configuration options","text":"<p>Run configure with <code>--help</code> option to list the available compilation options.  Apart from <code>--with-native-compilation=aot</code> defaults are used when Practicalli compiles Emacs.</p> <pre><code>Optional Packages:\n  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)\n  --without-all           omit almost all features and build small executable\n                          with minimal dependencies\n  --with-mailutils        rely on GNU Mailutils, so that the --without-pop\n                          through --with-mailhost options are irrelevant; this\n                          is the default if GNU Mailutils is installed\n  --with-pop              Support POP mail retrieval if Emacs movemail is used\n                          (not recommended, as Emacs movemail POP is\n                          insecure). This is the default only on native\n                          MS-Windows.\n  --with-kerberos         support Kerberos-authenticated POP\n  --with-kerberos5        support Kerberos version 5 authenticated POP\n  --with-hesiod           support Hesiod to get the POP server host\n  --with-mail-unlink      unlink, rather than empty, mail spool after reading\n  --with-mailhost=HOSTNAME\n                          string giving default POP mail host\n  --with-sound=VALUE      compile with sound support (VALUE one of: yes, alsa,\n                          oss, bsd-ossaudio, no; default yes). Only for\n                          GNU/Linux, FreeBSD, NetBSD, MinGW, Cygwin.\n  --with-pdumper=VALUE    enable pdumper support unconditionally ('yes', 'no',\n                          or 'auto': default 'auto')\n  --with-unexec=VALUE     enable unexec support unconditionally ('yes', 'no',\n                          or 'auto': default 'auto')\n  --with-dumping=VALUE    kind of dumping to use for initial Emacs build\n                          (VALUE one of: pdumper, unexec, none; default\n                          pdumper)\n  --with-x-toolkit=KIT    use an X toolkit (KIT one of: yes or gtk, gtk2,\n                          gtk3, lucid or athena, motif, no)\n  --with-wide-int         prefer wide Emacs integers (typically 62-bit); on\n                          32-bit hosts, this allows buffer and string size up\n                          to 2GB, at the cost of 10% to 30% slowdown of Lisp\n                          interpreter and larger memory footprint\n  --without-xpm           don't compile with XPM image support\n  --without-jpeg          don't compile with JPEG image support\n  --without-tiff          don't compile with TIFF image support\n  --without-gif           don't compile with GIF image support\n  --without-png           don't compile with PNG image support\n  --without-rsvg          don't compile with SVG image support\n  --without-webp          don't compile with WebP image support\n  --without-sqlite3       don't compile with sqlite3 support\n  --without-lcms2         don't compile with Little CMS support\n  --without-libsystemd    don't compile with libsystemd support\n  --without-cairo         don't compile with Cairo drawing\n  --without-xml2          don't compile with XML parsing support\n  --with-imagemagick      compile with ImageMagick image support\n  --without-native-image-api\n                          don't use native image APIs (GDI+ on Windows)\n  --with-json             compile with native JSON support\n  --with-tree-sitter      compile with tree-sitter\n  --without-xft           don't use XFT for anti aliased fonts\n  --without-harfbuzz      don't use HarfBuzz for text shaping\n  --without-libotf        don't use libotf for OpenType font support\n  --without-m17n-flt      don't use m17n-flt for text shaping\n  --without-toolkit-scroll-bars\n                          don't use Motif/Xaw3d/GTK toolkit scroll bars\n  --without-xaw3d         don't use Xaw3d\n  --without-xim           at runtime, default X11 XIM to off\n  --without-xdbe          don't use X11 double buffering support\n  --with-ns               use Nextstep (macOS Cocoa or GNUstep) windowing\n                          system. On by default on macOS.\n  --with-w32              use native MS Windows GUI in a Cygwin build\n  --with-pgtk             use GTK to support window systems other than X\n  --without-gpm           don't use -lgpm for mouse support on a GNU/Linux\n                          console\n  --without-dbus          don't compile with D-Bus support\n  --with-gconf            compile with Gconf support (Gsettings replaces this)\n  --without-gsettings     don't compile with GSettings support\n  --without-selinux       don't compile with SELinux support\n  --without-gnutls        don't use -lgnutls for SSL/TLS support\n  --without-zlib          don't compile with zlib decompression support\n  --without-modules       don't compile with dynamic modules support\n  --without-threads       don't compile with elisp threading support\n  --with-cygwin32-native-compilation\n                          use native compilation on 32-bit Cygwin\n  --without-xinput2       don't use version 2 of the X Input Extension for\n                          input\n  --with-small-ja-dic     generate a smaller-size Japanese dictionary\n  --with-file-notification=LIB\n                          use a file notification library (LIB one of: yes,\n                          inotify, kqueue, gfile, w32, no)\n  --with-xwidgets         enable use of xwidgets in Emacs buffers (requires\n                          gtk3 or macOS Cocoa)\n  --with-be-app           enable use of Haiku's Application Kit as a window\n                          system\n  --with-be-cairo         enable use of cairo under Haiku's Application Kit\n  --without-compress-install\n                          don't compress some files (.el, .info, etc.) when\n                          installing. Equivalent to: make GZIP_PROG= install\n  --with-gameuser=USER_OR_GROUP\n                          user for shared game score files. An argument\n                          prefixed by ':' specifies a group instead.\n  --with-gnustep-conf=FILENAME\n                          name of GNUstep configuration file to use on systems\n                          where the command 'gnustep-config' does not work;\n                          default $GNUSTEP_CONFIG_FILE, or\n                          /etc/GNUstep/GNUstep.conf\n  --with-native-compilation[=TYPE]\n                          compile with Emacs Lisp native compiler support. The\n                          TYPE 'yes' (or empty) means to enable it and compile\n                          natively preloaded Lisp files; 'no' means to disable\n                          it; 'aot' will make the build process compile all\n                          the Lisp files in the tree natively ahead of time.\n                          (This will usually be quite slow.)\n  --with-x                use the X Window System\n  --without-libgmp        do not use the GNU Multiple Precision (GMP) library;\n                          this is the default on systems lacking libgmp.\n  --without-included-regex\n                          don't compile regex; this is the default on systems\n                          with recent-enough versions of the GNU C Library\n                          (use with caution on other systems).\n</code></pre>","tags":["debian","spacemacs","emacs"]},{"location":"blog/build-emacs-from-source-on-debian-linux/#references","title":"References","text":"<ul> <li>Emacs 28.1 whats new - a very detailed description of new features in Emacs 28.1</li> <li>Emacs Wiki - Building Emacs - base instructions for building Emacs</li> <li>Ubuntu Emacs LISP team PPA - nightly builds from the latest Emacs commits</li> </ul> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["debian","spacemacs","emacs"]},{"location":"blog/clojure-advent-of-code---a-fun-way-to-learn/","title":"Clojure Advent Of Code - a fun way to learn","text":"<p>Advent of Code is the annual coding challenge with a festive theme.  Each day there is a new challenge in two parts, the first fairly easy the second a little more involved.  The challenges are an investment of your time to complete them all, although even trying just a few is enough to help you think in different ways.</p> <p>Every programming language requires regular practice to maintain your skills.  A full time developer role gives you lots of opportunities to practice every day, however, its often focused in around solving problems within a specific business domain, with little time to explore others.  The Advent of Code puts you in a different domain, so its great for extending your coding experiences.</p> <p>Solving challenges in a different language is another great way to extend your experiences, so here are some tips and examples for solving the advent of code in Clojure.</p>","tags":["code-challenge"]},{"location":"blog/clojure-advent-of-code---a-fun-way-to-learn/#tips","title":"Tips","text":"<ul> <li> <p>Keep the solution as simple as possible.  Its very easy to over-complicate the solution and end up simply confusing yourself.</p> </li> <li> <p>Don't try and make the perfect solution.  Write something that works, this will give you a nice ego boost.  Then you can experiment with the code and see if you can improve your approach.</p> </li> <li> <p>Break down the problem into the simplest thing you can solve first.  Trying to solve a problem all at once will quickly have you going around in circles.</p> </li> <li> <p>Keep all the code and make notes.  I use a a design journal in my projects to document my thinking process, capture decisions that worked and those that didn't work for this project.  The journal is a great way to cement learning from solving the challenge.</p> </li> <li> <p>Challenges are only accessible from their day of the month onwards.  There is a count-down clock displayed on the next challenge to open, so you know when it will be available.  Don't feel pressured to keep up with the challenges though, enjoy the experience and have fun, you will learn more that way.</p> </li> </ul> <p></p>","tags":["code-challenge"]},{"location":"blog/clojure-advent-of-code---a-fun-way-to-learn/#a-previous-example","title":"A previous example","text":"<p>In the following video I walk through the first challenge of Advent of Code from 2018, trying out different solutions at increasing levels of abstraction.  With each level of abstraction it helps to think in a more functional way.</p>","tags":["code-challenge"]},{"location":"blog/clojure-advent-of-code---a-fun-way-to-learn/#creating-a-project","title":"Creating a project","text":"<p>Create a directory that contains:</p> <ul> <li><code>deps.edn</code> file containing an empty hash-map, <code>{}</code></li> <li><code>src/practicalli/advent_of_clojure_code/day-01.clj</code> file</li> </ul> <p>Create a new Clojure file for each of the daily challenges.  It makes sense to keep both parts of each day in the same file.</p>","tags":["code-challenge"]},{"location":"blog/clojure-advent-of-code---a-fun-way-to-learn/#useful-resources-and-examples","title":"Useful Resources And Examples","text":"<p>Here are some videos of solving advent of code challenges and code solutions to many challenges from 2019 and past years.</p> <ul> <li>fdlk/advent-2019 - example Clojure solutions to the advent of code</li> <li>Awesome Advent Of Code - a collection of solutions in various languages</li> <li>Advent of Code 2018 video walk-through of Clojure solutions by Tim Pote and GitHub repository</li> </ul> <p>Also take a look at the #adventofcode channel in the Clojurians slack channel.</p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["code-challenge"]},{"location":"blog/docker-a-simple-workflow-for-clojure/","title":"Docker: a simple workflow for Clojure","text":"<p>Docker enables a consistent approach to building and running Clojure projects along with a range of other services locally (database, cache, streams, etc.), The Clojure project is built from source when starting services (a <code>watch</code> feature can rebuild on code changes). Heath checks and conditions are set to ensure dependant services start in the correct order.</p> <p>Running Docker is relatively fast once image overlays (layers) are cached on their first run, so its a viable approach for local system integration testing and acceptance testing, before pushing changes to a remote Continuous Integration service.</p> <p>A Docker workflow complements a  REPL Driven Development workflow, it does not replace it.  The main development effort should be more effective via a REPL connected editor with Docker Compose focused on orchestration of services.</p> <p>Deeper into Docker</p> <p> Practicalli Engineering Playbook covers Docker and Compose in more detail</p>","tags":["docker"]},{"location":"blog/docker-a-simple-workflow-for-clojure/#general-workflow","title":"General Workflow","text":"<ul> <li>Create a Clojure project, e.g. using  Practicalli Project Templates</li> <li>Install Docker Desktop &amp; Extensions, e.g.  Docker Desktop for Ubuntu</li> <li>Create a Dockerfile e.g.  multi-stage build and run-time configuration for Clojure</li> <li> Compose services together, adding health checks and conditional starts</li> <li>REPL driven development, e.g.  Practicalli REPL Reloaded Workflow</li> <li>(optional) Automatic rebuild of Clojure project when  watching for code changes (experimental feature)</li> </ul> <p>Docker getting started tutorial</p> <p>Follow the Docker getting started tutorial once Docker is installed</p> <pre><code>docker run -d -p 80:80 docker/getting-started\n</code></pre>","tags":["docker"]},{"location":"blog/docker-a-simple-workflow-for-clojure/#docker-desktop","title":"Docker Desktop","text":"<p> Docker desktop provides a convienient way to manage Docker images, containers and volumes.  Sign in to Docker Desktop to manage your images on DockerHub.</p> <p></p> <p>There is a growing marketplace of extensions that provide very useful tools to extend the capabilities of Docker Desktop.  Search within the Docker Desktop extensions or for  extensions on Docker Hub.</p> <ul> <li> Resource Usage monitor resources (cpu, memory, network, disk) used by containers and docker compose systems over time</li> <li> Disk Usage optimise use of local disk space by removing unused images, containers and volumes</li> <li> Volumes Backup &amp; Share to backup, clone, restore and share Docker volumes easily</li> <li> Logs Explorer view all container logs in one place to assist troubleshooting</li> <li> Postgres Admin PGAdmin4 open source management tool for Postgres</li> <li> Trivy scan local and remote images for security vulnerabilities</li> <li> Snyk scan local and remote images for security vulnerabilities</li> <li> Ddosify high-performance, open-source and simple load testing tool</li> </ul> <p></p>","tags":["docker"]},{"location":"blog/docker-a-simple-workflow-for-clojure/#choosing-docker-images","title":"Choosing Docker Images","text":"<p> Docker Official Images from Docker Hub are highly recommended.  Look for the Docker Official Image tag on the image page.</p> <p></p> <ul> <li> Clojure - official Docker Image - built by the Clojure community, provides tools to build Clojure projects (Clojure CLI, Leiningen)</li> <li> Eclipse temurin OpenJDK - official Docker image - built by the  community - provides the Java run-time</li> <li> Amazon Corretto is an OpenJDK distribution by Amazon AWS team,  Amazon Corretto can also be installed for the local development environment</li> <li> Postgres open-source object-relational database management system</li> <li> Redis open-source, networked, in-memory, key-value data store with optional durability</li> <li> nginx open source reverse proxy &amp; load balancing for HTTP, HTTPS, SMTP, POP3 &amp; IMAP protocols, HTTP cache and a web server</li> <li> mariadb open source relational database by the original developers of MySQL and is much more efficient</li> </ul> <p>Official Docker Image definition</p> <p>An Official Docker Image means the configuration of that image follows the  Docker recommended practices, is well documented and designed for common use cases.  </p> <p>There is no implication at to the correctness of tools, languages or service that image provides, only in the means in which they are provided.</p>","tags":["docker"]},{"location":"blog/docker-a-simple-workflow-for-clojure/#use-multi-stage-dockerfile","title":"Use Multi-stage Dockerfile","text":"<p>A multi-stage <code>Dockerfile</code> contains <code>builder</code> stage and a <code>final</code> stage used as the run-time.  Optionally, the configuration can use a <code>base</code> stage that defines a common image and configuration which both build and final stages extend.</p> <p>The builder stage caches dependencies to optimise building Clojure and the run-time stage optimises running the service efficiently and securely.</p> <p>The uberjar created by the builder image is copied over to the final stage to keep the run-time image as clean and small as possible to minimise resource use.</p> <p></p> <p> Multi-stage <code>Dockerfile</code> for Clojure projects -  Docker Multi-stage builds docs</p> <p>Docker init feature</p> <p> <code>docker init</code> is a new (beta) feature to create <code>Dockerfile</code>, <code>.dockerignore</code> and<code>compose.yaml</code> files using Docker recommended practices.</p>","tags":["docker"]},{"location":"blog/docker-a-simple-workflow-for-clojure/#compose-services","title":"Compose services","text":"<p>Define a <code>compose.yaml</code> file that builds the Clojure project and run services that the Clojure service requires or talks too (database, cache, mock API, etc.). Each service can define a heart beat that can be used as a conditional startup for other services.</p> <p>compose.yaml new configuration file</p> <p><code>compose.yaml</code> is the new configuration file for orchestrating services locally, a simplified and extended version of <code>docker-compose.yaml</code>.</p> <p>Include the <code>build:</code> option for the Clojure service with the path to the multi-stage Dockerfile for the project (typically in the same root directory of the project, although a remote Git repository can also be used)</p> <p>The Clojure service defines a dependency on a Postgres Database.  The dependency has a condition so the Clojure service is only started once the Postgres service is healthy</p> <p>Clojure and Postgres Composure configuration</p> <pre><code>services:\n  clojure-service:\n    platform: linux/amd64\n    build: ./\n    ports: # host:container\n      - 8080:8080\n    depends_on:\n      postgres-database:\n        condition: service_healthy\n\n  postgres-database:\n    image: postgres:15.2-alpine\n    environment:\n      POSTGRES_PASSWORD: \"$DOCKER_POSTGRES_ROOT_PASSWORD\"\n    healthcheck:\n      test: [ \"CMD\", \"pg_isready\" ]\n      timeout: 45s\n      interval: 10s\n      retries: 10\n    ports:\n      - 5432:5432\n</code></pre> <p>Run the services using docker from the root of the project</p> <pre><code>docker compose up --build\n</code></pre>","tags":["docker"]},{"location":"blog/docker-a-simple-workflow-for-clojure/#file-watcher","title":"File watcher","text":"<p>Docker provides  <code>watch</code> as an experimental feature which can rebuild the Clojure service when a file change is detected.  This seems most useful when troubleshooting issues that occur during system integration testing.</p> <p>Add an <code>x-develop</code> configuration with watch under the Clojure service configuration</p> <p>Composure x-develop file watch configuration</p> <pre><code>    x-develop:\n      watch:\n        - path: ./deps.edn\n          action: rebuild\n        - path: ./src\n          action: rebuild\n</code></pre> <p>Start the services and the file watch mode</p> <pre><code>docker compose up --detach &amp;&amp; docker compose alpha watch\n</code></pre> <p>Save changes to files and a new image for the Clojure service will be built and deployed when ready.</p>","tags":["docker"]},{"location":"blog/docker-a-simple-workflow-for-clojure/#summary","title":"Summary","text":"<p>Docker desktop provides lots of tools to support local system integration work before code is sent to a continuous integration service (or as a temporary alternative if that CI service id down)</p> <p>Practicalli Project Templates include <code>Dockerfile</code>, <code>.dockerignore</code> and <code>compose.yaml</code> configurations for Clojure development, kick-starting the use of Docker.</p> <p>Docker images are a relatively clean way of trying out different services or even different operating systems, e.g. Ubuntu or  ArchLinux.  Deleting the images removes the whole service without affecting the underlying operating system.</p> <p> MegaLinter is an excellent example of a docker image that provides a large number of tools that would otherwise need to be installed directly on the operating system.</p> <ul> <li> Docker Desktop Overview</li> <li> Docker Desktop Extensions overview</li> <li> Docker Build overview</li> <li> Docker Compose Overview</li> </ul> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["docker"]},{"location":"blog/essential-tooling-for-clojure-development/","title":"Essential tooling for Clojure development","text":"<p>Clojure development benefits from great tooling focused around an editor (or IDE).</p> <p>Practicalli uses many features of a Clojure aware editor with a bias towards highly effective interaction with the REPL, user actions driven exclusively via the keyboard and an uncluttered user interface.</p> <p>Practicalli Clojure provides an overview of Clojure editors and the plugins that provide Clojure support, e.g. Emacs, Neovim, VS Code, Pulsar and Sublime.  </p> Practicalli preferred editors <p>LightTable was the editor used in the early years of learning Clojure as it was simple to use and provided instant feedback as code was typed.</p> <p>Once Spacemacs was release, Emacs with CIDER became the predominant editor for many years.</p> <p>Treemacs and LSP have matured so Neovim and Conjure has been adopted to provide a fast editing environment with streamlined key bindings for Clojure development.</p>","tags":["clojure"]},{"location":"blog/essential-tooling-for-clojure-development/#repl-connnection","title":"REPL connnection","text":"<p>Interaction with the REPL is the foundation of highly effective Clojure development. An editor connects to a REPL process via a network repl (nREPL) server process.</p> <p>Practicalli starts a REPL process in a terminal using the Clojure CLI tool.  </p> <p><code>:repl/rebel</code> alias is used to run Rebel Readline to provide a rich terminal UI REPL prompt and starts an nREPL server to support an editor connection.</p> <pre><code>clojure -M:repl/rebel\n</code></pre> <p></p> <p>Jack-in or Connect</p> <p>The REPL and nREPL processes are started by an editor jack-in command, providing the relevant dependencies and command line options to the Clojure CLI.  The editor automatically connects to the nREPL process.</p> <p>The same command can be run in a terminal and once nREPL server is running the editor can be connected.</p> <p>Practicalli uses a terminal REPL prompt for longer running processes or as a way to separate logs from evaluation events, e.g. starting components such as web servers.</p> <p>Starting the REPL process outside of the editor provides a useful separation of editor and REPL, also allows for a range of editors and other tooling to share the REPL state </p> <p></p>","tags":["clojure"]},{"location":"blog/essential-tooling-for-clojure-development/#customise-repl-starup","title":"Customise REPL starup","text":"<p>The <code>user</code> namespace is always loaded during REPL startup, allowing tools and libraries to be included via a <code>user.clj</code> file when on the class path.</p> <p>Clojure development workflows and tools may vary across projects, so customising the REPL starup is highly valuable.</p> <p>Aliases for development tools</p> <p>Clojure CLI aliases from project and user level deps.edn to support different configurations and tools when starting the REPL process</p> <p>The <code>:dev/env</code> and <code>:repl/reloaded</code> aliases from Practicalli Clojure CLI Config add the <code>dev</code> directory to the class path, loading a custom <code>user</code> namespace defined in <code>dev/user.clj</code>.  </p> <p>A  custom <code>user</code> namespace supports the  Practicalli REPL Reloaded workflow, launching Portal data inspector listening to all evaluation results and Mulog Tap Publisher sending log events to Portal.</p>","tags":["clojure"]},{"location":"blog/essential-tooling-for-clojure-development/#evaluate-clojure","title":"Evaluate Clojure","text":"<p>Evaluates expressions as they are written, providing qualative feedback on the expected behaviour.</p> <p>Expressions are evaluated in Source code window with results inline, keeping focus on the code and avoiding the need to switch namespaces in the REPL.  Larger data structures can be sent to a data inspector (Portal, Cider Inspector)</p> <p>Cleaning up the REPL state </p> <ul> <li>Un-evaluate a var to avoid running stale code and tests, e.g. remove def, defn, deftest names from the REPL process</li> </ul> <p></p>","tags":["clojure"]},{"location":"blog/essential-tooling-for-clojure-development/#structural-editing","title":"Structural Editing","text":"<p>Clojure has a highly structured syntax compared to many other languages thanks to its LISP heritage.  Functions are defined and called in expressions using parenthesis, <code>()</code>.</p> <p>Writing and code refactor is enhanced when the editor ensures parenthesis remain balanced, i.e. every opening paren has a closing paren.</p> <p>paredit ensurce balanced parens along with structural refactor commands to change the structure, e.g.</p> <ul> <li>slurp pulls expressions into the current expression</li> <li>barf pushes the current expression out of the surrounding expression</li> </ul> <p>parinfer provides structural editing based on indentation, automatically ensuring parens are ballanced as code is added or changed.  Parinfer doesnt require any commands or key bindings and so can feel more natural.</p> <p></p>","tags":["clojure"]},{"location":"blog/essential-tooling-for-clojure-development/#maintain-repl-state","title":"Maintain REPL State","text":"<p>A Clojure REPL can be very long lived thanks to the stability of the Java Virtual Machine (JVM).  Removing state vars can help avoid a REPL restart, as tools that refresh namespaces and start/stop/restart a Clojure system components.</p> <ul> <li>refresh changed namespaces of the project in the REPL process, optionally with hook to restart components</li> </ul> <p>For simpler applications, Practicalli loads <code>clojure.tools.namespace.repl</code> at REPL starup via a custom <code>user</code> namespace to <code>refresh</code> stale namespaces in the project and <code>set-refresh-dirs</code> to define the directory paths that should be checked for changes (excluding <code>dev</code> from the path to avoid reloading tools).</p> <p>For web services and Clojure projects composed of system components, the  Practicalli Service REPL workflow is used. The Service REPL workflow uses either  donut-party/system or  Integrant &amp; Integrant REPL to manage restarting of components and reloading changed namespaces into the REPL state.</p> <p> Practicalli Service REPL workflow</p> <p> donut-party/system  Integrant &amp; Integrant REPL</p>","tags":["clojure"]},{"location":"blog/essential-tooling-for-clojure-development/#inspecting-navigating-data","title":"Inspecting / Navigating Data","text":"<p>Many results of evaluating Clojure produce interesting and potentially complex data structures.  Tools for navigating data aid in the understanding of results produced by Clojure code.</p> <p>Being able to present the results in different ways can add greater meaning and easier consumption of the results, e.g. visual charts to support data science.</p> <ul> <li>navigate data, especially nested data</li> <li>paginate through large data sets without slowing down the tooling </li> <li>inspect results of an evaluation and follow updates after each evaluation</li> </ul> <p>Emacs Cider Inspector is very powerful for paging through large data sets effectively and navigating a complex structure.</p> <p>Portal can also navigate data and can show data in a range of views to add more meaning support, e.g. http responses for API development, tables &amp; charts for data science, etc...</p> <p>Practicalli configures Portal to listen over nREPL to all Clojure code evaluations, which will work with all of the Clojure editors.</p> <p> Portal Data Inspector - Practicalli Clojure </p>","tags":["clojure"]},{"location":"blog/essential-tooling-for-clojure-development/#creating-projects","title":"Creating projects","text":"<p>Creating a  a clojure project from templates can save time and provide a consistent base for an organisation.  Extending project templates with options allows for diversity whist still providing common a approach.</p> <p>Projects from template are typically created via a shell command, so an editor with shell support is valuable.</p> <p> Practicalli Project Templates simplifies Clojure project creation with a growing number of templates, derived from commercial and community experiences.</p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["clojure"]},{"location":"blog/expose-clojure-service-using-ngrok/","title":"Expose Clojure Service using Ngrok","text":"<p>Exposing a local running services can be valuable when writing apps and web-hooks for Cloud API products, e.g. Slack, Atlassian Confluence, Hasura, Salesforce, etc.</p> <p>ngrok exposes local networked services behinds NATs and firewalls to the public internet over a secure tunnel.</p> <p>Create a free ngrok account to get an authorisation token for use with the ngrok agent to create a secure tunnel.  Or add an SSH public key to use SSH reverse tunnel with the ngrok service.</p> <p>ngrok has additional paid services, although they are not required for exposing local services.</p>","tags":["clojure","ngrok"]},{"location":"blog/expose-clojure-service-using-ngrok/#example-clojure-service","title":"Example Clojure Service","text":"<p>Practicalli Clojure CLI Config defines the <code>:project/create</code> alias to generate a new project from a template.  The <code>practicalli/service</code> template creates a project for developing web services with a REST API.</p> <p>Create a project called gameboard using donut system to manage service components</p> <pre><code>clojure -T:project/create :template practicalli/service :name practicalli/gameboard :component donut\n</code></pre> <p>Change into the <code>gameboard</code> directory</p> <p><code>make run</code> (<code>clojure -M:run/service</code>) to run the service locally, serving an API endpoint on http://localhost:8080</p> <p>Alternatively, <code>make docker-build</code> to run the service via a docker container (assuming Docker is running locally).</p>","tags":["clojure","ngrok"]},{"location":"blog/expose-clojure-service-using-ngrok/#install-ngrok","title":"Install ngrok","text":"<p>Linux (apt) operating system, add a ngrok repository key and install the ngrock package</p> Install on Apt based Linux operating system<pre><code>curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | \\\n  sudo tee /etc/apt/trusted.gpg.d/ngrok.asc &gt;/dev/null &amp;&amp; \\\n  echo \"deb https://ngrok-agent.s3.amazonaws.com buster main\" | \\\n  sudo tee /etc/apt/sources.list.d/ngrok.list &amp;&amp; \\\n  sudo apt update &amp;&amp; sudo apt install ngrok\n</code></pre> <p>MacOS install with HomeBrew:</p> <pre><code>brew install ngrok/ngrok/ngrok\n</code></pre> <p>Ngrok download page for other installation options or use an SSH reverse tunnel without need to install the ngrok agent.</p>","tags":["clojure","ngrok"]},{"location":"blog/expose-clojure-service-using-ngrok/#setup-ngrok","title":"Setup ngrok","text":"<p>Create an account with multi-factor authentication.</p> <p>Login to the Ngrok dashboard to obtain the Authtoken (tunnel credential) for the ngrok account.  The token is used by the ngrok agent to log into the ngrok account when starting a tunnel.</p> <pre><code>ngrok config add-authtoken TOKEN\n</code></pre> <p>Claim a free static domain to avoid random URLs. Creating a domain of your own choosing is a paid service on ngrok.</p>","tags":["clojure","ngrok"]},{"location":"blog/expose-clojure-service-using-ngrok/#ngrok-config-file","title":"ngrok config file","text":"<p>Use a configuration file to define one or more tunnels for use with the ngrok agent.</p> <p>Open the default ngrok configuration file for editing:</p> <pre><code>ngrok config edit\n</code></pre> <p>Or open the yaml file from the default configuration location</p> <ul> <li>Linux: <code>~/.config/ngrok/ngrok.yml</code></li> <li>MacOS (Darwin): <code>~/Library/Application Support/ngrok/ngrok.yml</code></li> </ul> <pre><code>authtoken: ***************************_*********************\nversion: 2\ntunnels:\n  custom_tunnel_name:\n    proto: http\n    hostname: free-static-domain-name.ngrok-free.app\n    addr: 127.0.0.1:8080\n\n    # -------------------------\n    # Additional options\n    # -------------------------\n    # auth: \"username:password\"\n    # host_header: rewrite\n    # inspect: true\n    # bind_tls: true\n</code></pre> <p>ngrok agent configuration file documentation</p> <p>Start the tunnel using the command line.</p> <pre><code>ngrok start custom_tunnel_name\n</code></pre> <p>Or start all tunnels in the configuration file</p> <pre><code>ngrok start --all\n</code></pre>","tags":["clojure","ngrok"]},{"location":"blog/expose-clojure-service-using-ngrok/#inspecting-traffic","title":"Inspecting traffic","text":"<p>Open http://localhost:4040 to view the ngrok web interface, allowing inspection of traffic over the secure HTTP tunnel (TCP &amp; TLS tunnel inspection not supported).</p> <p>The web interface lists each request through the tunnel and selecting a request shows all the details of that request.</p> <ul> <li>Request body validation (JSON, XML data)</li> <li>Filter requests on request path, response status code, response body size, request duration, or any header value</li> <li>Replay requests, optionally modifying a request first</li> <li>ngrok agent status to help with troubleshooting the tunnel connetion</li> </ul> <p></p> <p>Ngrok web inspection interface</p>","tags":["clojure","ngrok"]},{"location":"blog/expose-clojure-service-using-ngrok/#ssh-reverse-tunnel","title":"SSH reverse tunnel","text":"<p>ngrok can be used with SSH reverse tunneling (ssh -R), avoiding the need to install the ngrok agent.</p> <p>Add an SSH public key to the ngrok dashboard, Tunnels &gt; SSH Public Keys</p> <p>Run the command to open an SSH reverse tunnel to ngrok</p> <pre><code>ssh -R 443:localhost:80 tunnel.us.ngrok.com http\n</code></pre> <p>SSH reverse tunnel agent documentation</p>","tags":["clojure","ngrok"]},{"location":"blog/expose-clojure-service-using-ngrok/#ngrok-docker-service","title":"ngrok Docker service","text":"<p>Use a Docker image containing ngrok to avoid installing the ngrok agent.</p> <p>ngrok provides the ngrok/ngrok docker image.  Practicalli recommends using the alpine image variant for minimal resource use.</p> <pre><code>docker run -it -e NGROK_AUTHTOKEN=$NGROK_AUTH_TOKEN ngrok/ngrok:alpine http 8080 --domain=free-static-domain-name.ngrok-free.app\n</code></pre> <p>Add an ngrok service to Docker <code>compose.yaml</code>, optionally adding a volume and port configuration.</p> <p>To manage ngrok configuration effectively, add an <code>ngrok.yml</code> configuration to the root of the directory where the ngrok image is to be run.  The <code>ngrok.yml</code> config is mounted to <code>/etc/ngrok.yml</code> in the Docker container, allowing an simple way to update the config.</p> compose.yaml<pre><code>services:\n    ngrok:\n        image: ngrok/ngrok:alpine\n        restart: unless-stopped\n        command:\n          - \"start\"\n          - \"--all\"\n          - \"--config\"\n          - \"/etc/ngrok.yml\"\n        volumes:\n          - ./ngrok.yml:/etc/ngrok.yml\n        ports:\n          - 4040:4040\n</code></pre> <p>Run all the services defined in the Docker <code>compose.yml</code> file, optionally with the <code>--detatch</code> flag to run in the background of the shell.</p> <pre><code>docker compose up --detatch\n</code></pre> <p>Or run only the ngrok service</p> <pre><code>docker compose up --detatch ngrok\n</code></pre> <p>Add an ngrok service to a Docker compose configuration to build &amp; run the clojure service in conjunction with a multi-stage dockerfile.</p> <p>Using ngrok with Docker</p>","tags":["clojure","ngrok"]},{"location":"blog/expose-clojure-service-using-ngrok/#secure-public-endpoints","title":"Secure public endpoints","text":"<p>ngrok agent allows security to be dynamically added to any public endpoint, with IP restrictions</p> <ul> <li>HTTP Basic Authentication</li> <li>OAuth 2.0</li> <li>OpenID Connect</li> <li>SAML</li> <li>Webhook Verification</li> <li>Mutual TLS</li> </ul>","tags":["clojure","ngrok"]},{"location":"blog/expose-clojure-service-using-ngrok/#summary","title":"Summary","text":"<p>ngrok is a secure way to expose locally running services that integrate with cloud services and can help speed development by providing faster feedback than running a full deployment cycle.</p> <p>ngrok agent works on multiple operating systems and can be run in a Docker container.  An SSH reverse tunnel can be used for zero agent install approach.</p> <p>Using ngrok only because the continuous integration process is very time consuming is a strong indication that time should be invested in improving the CI workflow, ensuring the minimal amount of work is required to create a repeatable build.</p> <p>practicalli GitHub profile I @practical_li</p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["clojure","ngrok"]},{"location":"blog/safeguard-against-git-commit-spoofing/","title":"Safeguard against Git Commit Spoofing","text":"<p>Git Commit Spoofing is where a person uses the Git identity of another person to modify commits pushed to GitHub, assuming they can obtain write permission to a branch or via a PR.</p> <p>Signing is especially useful for those contributing changes via a pull request.  Signing provides greater confidence that the contribution is from a verifyable account.</p> <p>Working in the Financial sector for many years, signing of commits has become manditory to reduce risk and increase traceability for audit trails.</p> <p>All Practicalli commits are now signed using a passphrase protected SSH key, registered as a signing key with the GitHub account.  All contributions via pull request should be also be signed, either with GPG or SSH keys.</p>","tags":["git"]},{"location":"blog/safeguard-against-git-commit-spoofing/#spoof-a-commit","title":"Spoof a commit","text":"<p>With write access to a shared git repository, spoofing commits is trivial.</p> <p>Use <code>git log</code> to look through the commit history of the repository and copy information from the <code>Author</code> field. </p> <p>Set the git client configuraiton to be the same as one of the existing author fields to spoof with that account.</p> <p>Set Git Identity</p> <pre><code>git config --global user.email \"existing-author@domain.tld\"\ngit config --global user.name \"existing author name\"\n</code></pre> <p>Creating a malicious change, stage and create a commit. The Author field on the new commit will be the same as that of the existing commit.</p> <p>Amending an existing commit is a more likely approach to masking a malicious change than creating a new commit.</p> <p>Stage the change and then use the <code>--amend</code> option to create an updated commit which will still have the existing authors information. </p> <p>To avoid changing identity each time a spoof is made,  multiple git identities can be configured using <code>includeIf</code> based on path, so repositories to be spoofed would be kept in the same parent directory.</p>","tags":["git"]},{"location":"blog/safeguard-against-git-commit-spoofing/#safeguard-github-account","title":"Safeguard GitHub account","text":"<p>Add two Yubikey hardware Security keys as Two-Factor authentication for your GitHub account. One Yubikey for daily work and one kept securely as a backup.</p> <p>A hardware security key provides greater account protection than Time-based One Time Password (TOTP), i.e.  Authy app or Google Authenticator.</p> <p>Use TOTP for initial Two-Factor authentication on GitHub</p> <p>GitHub required an existing form of Two-factor authentication before being able to add a hardware security key, e.g. Yubikey.</p> <p>Remove the TOTP authentication once Hardware Security keys have been added for increased account security.</p>","tags":["git"]},{"location":"blog/safeguard-against-git-commit-spoofing/#safeguard-git-repository","title":"Safeguard Git Repository","text":"<ul> <li>Limit the number of accounts with write access to the repository</li> <li>Sign commits and annotated tags via SSH or PGP keys</li> </ul> <p>Signing commits and tags with SSH keys is the approach covered in the rest of the article.</p> <p>GitHub vigilant mode</p> <p> Enable GitHub vigilant mode to show a verification status badge against all commits, which helps highlight unverified commits.</p>","tags":["git"]},{"location":"blog/safeguard-against-git-commit-spoofing/#generate-ssh-key","title":"Generate SSH Key","text":"<p>Generate an SSH key using the ED25310 type, using a verified email address added to the GitHub user account. </p> <p>The SSH key should be created by a passphrase for greater security, saving the passphrase to the operating system key ring for convienience.</p> <p>Generate an SSH Key using ED25310</p> <pre><code>ssh-keygen -t ed25519 -C \"name@domain.tld\"\n</code></pre> <p>Ensure the the email account used to create the SSH key is registered and verified in the GitHub user account.</p>","tags":["git"]},{"location":"blog/safeguard-against-git-commit-spoofing/#add-ssh-keys-to-github","title":"Add SSH keys to GitHub","text":"<p>Add the public SSH key as an authentication key to push changes to GitHub repositories the account has write access too.</p> <p>Add the public SSH key as a Signing Key to validate locally signed commits when pushed to GitHub repositories.</p> <p> SSH Keys for GitHub account </p> <p> SSH Key generation - Practicalli Engineering Playbook </p>","tags":["git"]},{"location":"blog/safeguard-against-git-commit-spoofing/#configure-git-to-sign-commits-and-tags","title":"Configure Git to Sign commits and tags","text":"<p>Configure the local Git client to automtically sign every commit or annotated tag using an SSH key. e.g. <code>~/.config/git/config</code> file.</p> <p>Create an <code>allowed-signatures</code> file and add the public SSH key to the file, prefixing the key with the email address used to create the key.</p> <p>Commit and tag automatic signing with SSH key</p> ~/.config/git/config<pre><code>## ------ Git Behaviour ------ ##\n[commit]\n  # Automatically sign every commit\n    gpgsign = true\n\n[tag]\n  # Automatically sign every tag\n    gpgsign = true\n\n# SSH Key signing \n[user]\n    signingkey = ~/.ssh/id_ed25519.pub\n[gpg]\n    format = ssh\n[gpg \"ssh\"]\n    allowedSignersFile = ~/.config/git/allowed-signatures\n</code></pre> <p>The private SSH key is automatically used to sign each commit and annotated tag.</p> <p>With the public SSH key in the <code>allowedSignersFile</code> any GitHub client should show that the local commit is signed, i.e. Good \"git\" signature message.</p> <p> </p> <p>When the signed commit or tag is pushed to GitHub, the signature is checked against the public key registered with the user account and the change marked as verified if they match.</p> <p></p> <p> Commit signing with SSH Key - Practicalli Engineering Playbook </p>","tags":["git"]},{"location":"blog/safeguard-against-git-commit-spoofing/#summary","title":"Summary","text":"<p>As long as the private SSH key is not shared with others, then SSH key signing is a very strong approach to verifying the source of all contributions.</p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["git"]},{"location":"blog/pin-emacs-packages-to-manage-issues/","title":"Pin Emacs packages to manage issues","text":"<p>Emacs provides a huge amount of features via packages. Community configurations like Spacmacs orchestrate packages so they work seemlessly together.  It is rare, but sometimes a package will have a breaking issue.</p> <p>Melpa provides (5,544) up-to-date packages  automatically built from each projects Git repository. Builds are defined by a recipe for each package.</p> <p>A custom recipe can be used to control which version of a package is used with the Emacs configuration, to work around issues or changes to a package.</p>","tags":["emacs","spacemacs"]},{"location":"blog/pin-emacs-packages-to-manage-issues/#melpa-recipes","title":"Melpa recipes","text":"<p>Search for packages on the Melpa website and view its recipe to understand how it is built.</p> <p>Emacs Package Recipe from Melpa</p> <pre><code>(treemacs\n :fetcher github\n :repo \"Alexander-Miller/treemacs\"\n :files (:defaults\n         \"Changelog.org\"\n         \"icons\"\n         \"src/elisp/treemacs*.el\"\n         \"src/scripts/treemacs*.py\"\n         (:exclude \"src/extra/*\")))\n</code></pre> <p>Melpa will build the package from the lastest commit.</p> <p><code>:commit</code> with a specific Git SHA value can be used to specify a different commit, especially useful for using an earlier package known to be issue free.</p> <p>Visit the shared Git repository of the package and review the commit history to find a likely working package.</p>","tags":["emacs","spacemacs"]},{"location":"blog/pin-emacs-packages-to-manage-issues/#custom-recipe-in-spacemacs","title":"Custom recipe in Spacemacs","text":"<p>Spacemacs uses packages from Melpa so the latest package versions are downloaded when Spacemacs is installed.</p> <p>Users of Spacemacs can decide when to update packages by manually running a package update, <code>SPC f e U</code>, usually when a new feature in a package is desirable.</p> <p>If there is an issue with updated package, then run a package rollback via the link on the Spacemacs home buffer, <code>SPC b h</code>.</p> <p>If the majority of package updates are required, then a specific package version can be pinned by providing a custom recipe.</p> <p>Add a custom recipe to the Spacemacs user configuration, to the <code>dotspacemacs-additional-packages</code>.</p> <p>Move the newest package version from the <code>elpa/&lt;emacs-version&gt;/develop/</code> directory to trigger a package download when Emacs is restarted.</p> <p>Example package pin</p> <pre><code>   dotspacemacs-additional-packages\n   '((treemacs\n      :location (recipe\n                 :fetcher github\n                 :repo \"Alexander-Miller/treemacs\"\n                 :commit \"2c576bebccd56ec8e65f4ec5ed5de864d9684fbf\"\n                 :files (:defaults\n                         \"Changelog.org\"\n                         \"icons\"\n                         \"src/elisp/treemacs*.el\"\n                         \"src/scripts/treemacs*.py\"\n                         (:exclude \"src/extra/*\")))))\n</code></pre> <p>Update Spacemacs only when there is a need</p> <p>Practicalli recommends Spacemacs packages should be updated only when there is a known new feature or bug fix available.</p> <p>Avoid updating packages when your time is constrained, so there is scope to resolve a potential error.</p>","tags":["emacs","spacemacs"]},{"location":"blog/pin-emacs-packages-to-manage-issues/#copy-package-from-rollback-cache","title":"Copy package from rollback cache","text":"<p>Spacemacs saves a short history of package files in the <code>.cache/.rollback/&lt;emacs-version&gt;/develop/&lt;rollback-date&gt;</code></p> <p>Rather than use a custom recipe or revert all updated packages, a specific package can be copied from the rollback cache, removing the newer package.</p> <p>For example:</p> <pre><code>cp -r ~/.config/emacs/.cache/.rollback/28.3/develop/23-08-10_07.35.07/treemacs-20230703.1929/ ~/.config/emacs/elpa/28.3/develop/\n</code></pre>","tags":["emacs","spacemacs"]},{"location":"blog/pin-emacs-packages-to-manage-issues/#summary","title":"Summary","text":"<p>Issues with Emacs packages are quite rare from experience and often solved very quickly.</p> <p>A Package rollback in Spacemacs is a very quick way to resolve an issue.  Pinning a package using a custom recipe a little more involved, although still a relatively quick approach if the error messages identify a troubled package.</p> <p>The Spacemacs community is very large so issues are reported quickly.  Even if the issue is not a simple resolution then collectively the issue is solved quite rapidly.</p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>","tags":["emacs","spacemacs"]},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/","title":"Web Scraping with Clojure - Scraping Hacker News","text":"<p>Enlive is a Clojure library that can be used for generating dynamic server-side content as well as scraping websites.</p> <p>Scraping websites is sometimes required when they do not provide an API.  Although Hacker News does have an API, will show how to scrape its website using Enlive's selectors.</p>"},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/#create-a-clojure-project","title":"Create a Clojure project","text":"<p>Create a directory that contains:</p> <ul> <li><code>deps.edn</code> file containing an empty hash-map, <code>{}</code></li> <li><code>src/practicalli/webscrape.clj</code> file</li> </ul> <p>Edit the <code>deps.edn</code> file and add the Enlive library as a dependency, optionally including a specific version of the Clojure library.</p> <pre><code> :deps\n {org.clojure/clojure {:mvn/version \"1.12.0\"}\n  enlive/enlive       {:mvn/version \"1.1.6\"}}\n</code></pre> <p>Now we are read to start the REPL, either via your editor, using <code>clj</code> or using rebel readline <code>clojure -A:rebel</code> if installed.</p> <p>See details of how to install these</p> <p>Open the <code>src/practicalli/webscraper-enlive.clj</code> file and add code for our scraper</p>"},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/#adding-a-website-to-scrape","title":"Adding a website to scrape","text":"<p>A <code>def</code> function could be used to bind the URL to a name</p> <pre><code>(def hacker-news-url \"https://news.ycombinator.com/\")\n</code></pre> <p>Enlive will scrape a website using the <code>html-resource</code> function, which takes an HTML object (<code>java.net.URL</code>) and converts it into a nested Clojure data structure, a bit like a simplfied Document Object Model (DOM).</p> <pre><code>(html/html-resource (java.net.URL. hacker-news-url))\n</code></pre> <p>The <code>html-resource</code> function returns a sequence of hash-maps, containing Clojure keywords that represent the HTML tags and CSS styles.</p> <p>Here is just a small part of this output, specifically around the <code>&lt;td class=\"title\"&gt;</code> tag</p> <pre><code>{:tag :td,\n                  :attrs {:class \"title\"},\n                  :content\n                  ({:tag :a,\n                    :attrs\n                    {:href\n                     \"https://www.roadandtrack.com/new-cars/car-technology/a31451281/koenigsegg-gemera-engine-specs-analysis/\",\n                     :class \"storylink\"},\n                    :content\n                    (\"Koenigsegg\u2019s 2.0-Liter No-Camshaft Engine Makes 600 Horsepower\")}\n                   {:tag :span,\n                    :attrs {:class \"sitebit comhead\"},\n                    :content\n                    (\" (\"\n                     {:tag :a,\n                      :attrs {:href \"from?site=roadandtrack.com\"},\n                      :content\n                      ({:tag :span,\n                        :attrs {:class \"sitestr\"},\n                        :content (\"roadandtrack.com\")})}\n                     \")\")})}\n</code></pre>"},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/#caching-scraped-websites","title":"Caching scraped websites","text":"<p>When we are developing a scraping app we could end up hitting a website hundreds (thousands) of times and if lots of people did that it would not be good for that website.</p> <p>Using the caching nature of the <code>def</code> function, we can bind the result of calling the website to a name.  Each subsequent time the name bound to the results is evaluated, the existing data is used and the website is not visited.  This can also speed up your development if there is a slow connection to that website.</p> <pre><code>(def website-content-hacker-news\n  \"Get website content from Hacker News\n  Returns: list of html content as hash-maps\"\n\n  (html/html-resource (java.net.URL. hacker-news-url)))\n</code></pre> <p>Note: alternatively you could use a command line tool to pull down a website to a file, allowing you to work with the file outside the REPL.</p>"},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/#inspecting-what-to-scrape","title":"Inspecting what to scrape","text":"<p>There is typically a lot of structure and styling around the content of a web page, so finding the right starting point is sometimes tricky.  Using a browers Inspector tool can help find the right tags quickly.</p> <p>With the website open in your browser, use the Inspect Element tool to look for unique HTML tags and CSS classes that surround the content you need.</p> <p>Inspecting the headings in hacker news webpage, the text of each headline is inside a <code>td</code> tag, a table data cell.  The headings <code>td</code> tag has as a CSS style called <code>title</code>, so it can be referenced as <code>.td.title</code></p>"},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/#getting-selective-with-webpage-content","title":"Getting Selective with webpage content","text":"<p>Enlive uses selectors to extract specific content from the website content.</p> <p>Selectors are define as a vector containing keywords that represent the HTML tags and CSS classes in the original web page.</p> <p>To get all the matching headings we use a selector with the Enlive <code>select</code> function on the parsed</p> <pre><code>(html/select website-content-hacker-news [:td.title :a])\n</code></pre> <p>This returns a Clojure data structure containing any matching parts of the website.</p> <p>To see the results clearly, we can either pretty print them or just take the first part of the data structure.</p> <pre><code>(take 1\n  (html/select website-content-hacker-news [:td.title :a]))\n</code></pre> <p>Example output:</p> <pre><code>;; =&gt; ({:tag :a,\n;;      :attrs {:href \"https://www.roadandtrack.com/new-cars/car-technology/a31451281/koenigsegg-gemera-engine-specs-analysis/\", :class \"storylink\"},\n;;      :content (\"Koenigsegg\u2019s 2.0-Liter No-Camshaft Engine Makes 600 Horsepower\")})\n</code></pre> <p>The Enlive <code>text</code> function extracts the value from the <code>:content</code> key. Mapping the <code>text</code> function over our selected keys returns just the content we want</p> <pre><code>(map html/text\n     (html/select\n       website-content-hacker-news\n       [:td.title :a]))\n</code></pre> <p>This will return a list of all the matching headlines, each headline will be a string.</p> <pre><code>(\"Koenigsegg\u2019s 2.0-Liter No-Camshaft Engine Makes 600 Horsepower\" \"roadandtrack.com\" \"Git Partial Clone lets you fetch only the large file you need\" \"gitlab.com\" \"Pence says European travel ban will extend to U.K. and Ireland\" \"axios.com\" \"Coronavirus has caused a bicycling boom in New York City\" \"grist.org\" \"Iceland radically cut teenage drug use\" \"weforum.org\")\n</code></pre>"},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/#enlive-selectors","title":"Enlive Selectors","text":"<p>Enlive selectors are data structures that identify one or more HTML nodes. They describe a pattern of data\u2014\u200bif the pattern matches any nodes in the HTML data structure, the selector will select those nodes. A selector may select one, many, or zero nodes from a given HTML document, depending on how many matches the pattern has.</p> <p>The full reference for valid selector forms is quite complex, and beyond the scope of this recipe. See the formal selector specification for complete documentation.</p> <p>The following selector patterns should be sufficient to get you started:</p> <ul> <li><code>[:div]</code> Selects all <code>&lt;div&gt;</code> element nodes.</li> <li><code>[:div.sidebar]</code> Selects all <code>&lt;div&gt;</code> element nodes with a CSS class of \"sidebar\".</li> <li><code>[:div#summary]</code> Selects the <code>&lt;div&gt;</code> element with an HTML ID of \"summary\".</li> <li><code>[:p :span]</code> Selects all <code>&lt;span&gt;</code> elements that are descendants of <code>&lt;p&gt;</code> elements.</li> <li><code>[:div.menu :ul :li :span]</code> Selects only <code>&lt;span&gt;</code> elements inside an <code>&lt;li&gt;</code> element inside a <code>&lt;ul&gt;</code> element inside a <code>&lt;div&gt;</code> element with a CSS style of \"menu\".</li> <li><code>[[:div (nth-child 2)]]</code> Selects all <code>&lt;div&gt;</code> elements which are second children of their parent elements. The inner vector denotes a condition, i.e. the matched element must be a <code>&lt;div&gt;</code> and the nth-child predicate must hold true.</li> </ul> <p>Other predicates besides nth-child are available, as well as the ability to define custom predicates. See the Enlive documentation for more details.</p> <p>The range selector is specified a map literal, containing two selectors that inclusively matche all the nodes between the two matched nodes, in document order. The starting node is in key position in the map literal and the ending node is in value position, so the selector {[:#foo] [:#bar]} will match all nodes between nodes with a CSS ID of \"foo\" and a CSS ID of \"bar\".</p> <p>The example in the solution uses a range selector in the defsnippet form to select all the nodes that are part of the same logical blog post, even though they aren\u2019t wrapped in a common parent element.</p>"},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/#getting-the-voting-points","title":"Getting the voting points","text":"<p>Each heading can be voted for, which I believe keeps it on the site longer.  The points and when the article was posted can be pulled out using different selectors.</p> <p>The <code>.td.subtext</code> has several <code>span</code> tags as children and each <code>span</code> tag has a CSS selector, however, those CSS selectors are dynamically generated and therefore random.</p> <p>So the Enlive <code>first-child</code> function is used to get the <code>span</code> content.</p> <p>Then the Enlive <code>text</code> function pulls out all the values from the <code>:content</code> keys in the selected content.</p> <pre><code>(map html/text\n       (html/select\n         website-content-hacker-news\n         [:td.subtext html/first-child]))\n</code></pre>"},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/#make-functions-to-get-headings-and-points","title":"Make functions to get headings and points","text":"<p>The headings function</p> <pre><code>(defn headlines\n  \"Headlines of the currently published stories\n\n  Arguments: web address as a string\n  Returns: list of headlines as strings\"\n\n  [website-url]\n\n  (map html/text\n       (html/select\n         #_(website-content website-url)\n         ;; DEV: cached website\n         website-content-hacker-news\n         [:td.title :a])))\n</code></pre> <p>The points function</p> <pre><code>(defn article-scoring\n  \"Points of the currently published stories\n\n  Arguments: web address as a string\n  Returns: headlines in hiccup format \"\n\n  [website-url]\n\n  (map html/text\n       (html/select\n         ;; (website-content website-url)\n         ;; DEV: cached website\n         website-content-hacker-news\n         [:td.subtext html/first-child])))\n</code></pre>"},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/#combining-the-results","title":"Combining the results","text":"<p>A function to combine the results of heading and points</p> <pre><code>(defn headlines-and-scoring\n  \"Putting it all together...\"\n  [website-url]\n  (doseq [line (map #(str %1 \" (\" %2 \")\")\n                    (headlines website-url)\n                    (article-scoring website-url))]\n    (println line)))\n</code></pre> <p>This function uses <code>doseq</code> to iterate over each line and print the results to the REPL (or standard out if run as a command line program).  <code>doseq</code> itself returns <code>nil</code>.</p> <p>For each line that is printed, we map an anonymous function over the two collections, one collection from each of our functions <code>headlines</code> and <code>article-scoring</code></p> <p>The anonymous function gets a value from each of the collections and combines them in a string, putting the value from the second collection, <code>article-scoring</code> in round brackets.</p> <pre><code>#(str %1 \" (\" %2 \")\")\n</code></pre>"},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/#combining-selectors","title":"Combining selectors","text":"<p>The selectors passed to Enlive's <code>select</code> function can be combined in a Clojure set.</p> <p>So to get both headings and scoring we can use the following set as an arguments</p> <pre><code>#{[:td.title :a] [:td.subtext html/first-child]}\n</code></pre> <p>Then we can combine the prevous <code>headings</code> and <code>article-scoring</code> functions into a single function.</p> <pre><code>(defn headlines-and-scoring []\n  (map html/text\n       (html/select website-content-hacker-news\n                    #{[:td.title :a] [:td.subtext html/first-child]})))\n</code></pre> <p>The results of this function have the headings and scoring interleaved.  Using the Clojure <code>partition</code> function pairs each heading and score</p> <p>The anonymous function is updated to destructure the arguments, so we get a separate heading and score, which is then assembled in the same string form.</p> <pre><code>(defn print-headlines-and-scoring []\n  (doseq [line (map (fn [[h s]] (str h \" (\" s \")\"))\n                    (partition 2 (headlines-and-scoring)))]\n    (println line)))\n</code></pre>"},{"location":"blog/web-scraping-with-clojure---scraping-hacker-news/#summary","title":"Summary","text":"<p>This article only covers the basics of Enilve and more examples will come in future articles.</p> <p> Enlive Tutorial - Swannodette </p> <p> Templating HTML with Enlive </p> <p>Thank you.</p> <p> Practical.li Website </p> <p> Practical.li GitHub Org  practicalli-johnny profile</p> <p> @practicalli@clj.social  @practical_li</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/archive/2021/","title":"2021","text":""},{"location":"blog/archive/2020/","title":"2020","text":""},{"location":"blog/archive/2019/","title":"2019","text":""},{"location":"blog/category/clojure/","title":"clojure","text":""},{"location":"blog/category/git/","title":"git","text":""},{"location":"blog/category/emacs/","title":"emacs","text":""},{"location":"blog/category/docker/","title":"docker","text":""},{"location":"blog/category/debian/","title":"debian","text":""},{"location":"blog/category/cryogen/","title":"cryogen","text":""},{"location":"blog/page/2/","title":"Practicalli Articles","text":""}]}